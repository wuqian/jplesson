<?php
// $Id$

/**
 * @file
 * Teacher Module
 */

/**
 * Implementation of hook_menu().
 */
function student_menu() {
  $items['student'] = array(
    'title' => '学生平台',
  	'description' => '学习课程与实验、查看通知、完成作业与测试',
    'page callback' => 'student_task_list',
		'access arguments' => array('access content'), 
    'type' => MENU_NORMAL_ITEM,
  );
  $items['student/notices'] = array(
    'title' => '查看通知',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_notices'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/courses'] = array(
    'title' => '课程与实验',
 		'page callback' => 'student_courses',
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/lessons'] = array(
    'title' => '课程与实验',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_lessons'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/tests'] = array(
    'title' => '作业',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_tests'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/tests/finished'] = array(
    'title' => '已提交作业',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_tests_finish_list'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function student_perm() {
	return array(
		'access student pages',
		'create student test content',
    'delete own student test content',
    'delete any student test content',
    'edit own student test content',
    'edit any student test content',
	);
}

function student_access($op, $node, $account) {
  if ($op == 'create') {
  	if(arg(3)) {
  		return user_access('create student test content', $account);
  	}
  	else {
  		return FALSE;
  	}
  }

  if ($op == 'update') {
    if (user_access('edit any student test content', $account) || (user_access('edit own student test content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
  if ($op == 'delete') {
    if (user_access('delete any student test content', $account) || (user_access('delete own student test content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

function student_theme() {
	return array(
	  'student_nodes_list' => array(
      'arguments' => array('form' => NULL),
    ),
    'student_tests_form' => array(
      'arguments' => array('form' => NULL),
    ),
	);
}

function student_task_list() {
	$menu_items = array();
  $menu_items['通知'] = array(
  	'查看通知', 
  	array(
  		l('查看通知', 'student/notices'), 
  	),
  );
  $menu_items['课程与实验'] = array(
    '课程与实验学习、提问与答疑', 
  	array(
  		l('课程与实验列表', 'student/courses'), 
  	),
  );
  $menu_items['作业管理'] = array(
    '完成作业、查看作业反馈', 
  	array(
  		l('作业列表', 'student/tests'), 
  		l('已提交作业', 'student/tests/finished'), 
  	),
  );
  return theme('teacher_task_list', $menu_items);
}

function student_help($path, $arg) {
  global $base_url;
  switch ($path) {
    case 'student':
    	$output = '<p>'.'学习课程与实验、查看通知、完成作业与测试'.'<p>';
    	return $output;
  }
}

function student_notices() {
	global $user;
	if (!empty($user->class)) {
  	$result = pager_query('SELECT n.*, u.name FROM {node} n '.' INNER JOIN {users} u ON n.uid = u.uid '.' INNER JOIN {content_field_class} nc ON n.nid = nc.nid '.' WHERE n.type = "notice" AND n.status = 1 AND nc.field_class_value = '.$user->class.' ORDER BY n.changed DESC');
	}
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = array();
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => $node->name);
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}

function student_courses() {
	$result = db_query('SELECT * FROM {term_data} WHERE vid = 1 ORDER BY weight ASC');
	$menu_items = array();
	while ($course = db_fetch_object($result)) {
		$lessons = db_query('SELECT n.* FROM {node} n '.' INNER JOIN {term_node} t ON n.nid = t.nid WHERE n.type = "lesson" AND t.tid = '.$course->tid.' AND n.status = 1 ORDER BY n.changed DESC');
		$lessons_list = array();
		while ($lesson = db_fetch_object($lessons)) {
			$lessons_list[] = l($lesson->title, 'node/'. $lesson->nid);
		}
		$menu_items[$course->name] = array(
			$course->description,
			$lessons_list,
		);
	}
  return theme('teacher_task_list', $menu_items);
}

function student_lessons() {
	
	$result = pager_query(db_rewrite_sql('SELECT n.*, u.name FROM {node} n '.' INNER JOIN {term_node} t ON n.nid = t.nid INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = "lesson" AND t.tid = 1 AND n.status = 1 ORDER BY n.changed DESC'), 50, 0, NULL);
	
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = array();
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => $node->name);
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}

function student_tests() {
	global $user;
	if (!empty($user->class)) {
  	$result = pager_query('SELECT n.*, u.name FROM {node} n '.' INNER JOIN {users} u ON n.uid = u.uid '.' INNER JOIN {content_field_class} nc ON n.nid = nc.nid '.' WHERE n.type = "test" AND n.status = 1 AND nc.field_class_value = '.$user->class.' ORDER BY n.changed DESC');
	}
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $form['title'][$node->nid] = array('#value' => l($node->title, 'student/tests/'. $node->nid));
    $form['username'][$node->nid] = array('#value' => $node->name);
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}

/**
 * Student's test node info
 */
function student_node_info () {
	return array(
    'student_test_node' => array(
      'name' => t('学生作业'),
      'module' => 'student',
      'description' => t("学生作业"),
      'has_title' => TRUE,
      'title_label' => t('学生作业'),
      'has_body' => TRUE,
      'body_label' => t('学生作业'),
    )
  );
}


/**
 * Finish test & works.
 */
function student_form(&$node, $form_state) {
	global $user;
	$test = arg(3);
	if (!empty($user->class)&&!empty($test)) {
  	$result = db_query('SELECT n.* FROM {node} n INNER JOIN {users} u ON n.uid = u.uid INNER JOIN {content_field_class} nc ON n.nid = nc.nid  WHERE n.type = "test" AND n.status = 1 AND n.nid = %d AND nc.field_class_value = %s ORDER BY n.changed DESC', $test, $user->class);
		$question = db_fetch_object($result);
	}
	if ($question) {
		$form['question'] = array(
			'#content' => $question->title,
		);
	  $form['answer'] = array(
	    '#type' => 'textarea',
	    '#title' => t('填写答案'),
	  );
	}
	return $form;
}

function student_tests_form_submit($form, &$form_state) {

}

/**
 * Finished test & works list.
 */
function student_tests_finish_list() {

}

function theme_student_tests_form($form) {
  $output = '';
  $output .= $form['question']['#content'];
  $output .= drupal_render($form);
  return $output;
}

function theme_student_nodes_list($form) {
	// If there are rows in this form, then $form['title'] contains a list of
  // the title form elements.
  $has_posts = isset($form['title']) && is_array($form['title']);
  $select_header = $has_posts ? theme('table_select_header_cell') : '';
  $header = array(t('Title'), t('Author'), t('Date'));
  $output = '';
  $output .= drupal_render($form['options']);
  if ($has_posts) {
    foreach (element_children($form['title']) as $key) {
      $row = array();
      $row[] = drupal_render($form['title'][$key]);
      $row[] = drupal_render($form['username'][$key]);
      $row[] = drupal_render($form['date'][$key]);
      $rows[] = $row;
    }

  }
  else {
    $rows[] = array(array('data' => t('No posts available.'), 'colspan' => '6'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}