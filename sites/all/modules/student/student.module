<?php
// $Id$

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implementation of hook_menu().
 */
function student_menu() { 
  // This is the minimum information you can provide for a menu item.
  $items['student'] = array(
    'title' => '学生平台',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('student_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  // more complex menu item
  /*$items['TODO: Enter path'] = array(
    'title' => 'TODO: Enter menu item title',
    'description' => 'TODO: Enter description',
    'page callback' => 'TODO: Enter callback function',
    'page arguments' => '', // An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component.
    'access callback' => '', // defaults to user_access()
    'access arguments' => array('TODO: Enter user permissions'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM, // One of MENU_NORMAL_ITEM / MENU_CALLBACK / MENU_SUGGESTED_ITEM / MENU_LOCAL_TASK / MENU_DEFAULT_LOCAL_TASK
    'menu_name' => '', // Menu to place this item in.
    'title callback' => '', // Function to generate the title, defaults to t(). 
    'title arguments' => '', // Arguments to send to t() or your custom callback. 
  );*/
  // OPTIONAL: Fill in additional static menu items
  $items['admin/settings/student'] = array(
    'title' => 'Student module settings',
    'description' => 'Description of your On this date settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('student_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}


/**
 * Implementation of hook_block().
 */
function student_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Block 1');
      $blocks[1]['info'] = t('Block 2');
      // OPTIONAL: Add additional block descriptions here, if required.
      return $blocks;

    case 'configure':
      // OPTIONAL: Enter form elements to add to block configuration screen, if required.    
      if ($delta == 0 && user_access('administer module')) {
        $form['module_block_1'] = array();
      }
      if ($delta == 1 && user_access('administer module')) {
        $form['module_block_2'] = array();
      }
      return $form;

    case 'save':
      // OPTIONAL: Add code to trigger when block configuration is saved, if required.
      if ($delta == 0) {
        variable_set('module_block_setting_1', $edit['module_block_1']);
      }
      if ($delta == 1) {
        variable_set('module_block_setting_2', $edit['module_block_2']);
      }
      break;

    case 'view':
      if ($delta == 0) {
        $block['subject'] = t('Block 1 title');
        $block['content'] = t('Block 1 content');
      }
      if ($delta == 1) {
        $block['subject'] = t('Block 2 title');
        $block['content'] = t('Block 2 content');
      }
      // OPTIONAL: Enter additional cases for each additional block, if defined.

      return $block;
  }    
}


/**
 * Implementation of hook_link().
 */
function student_link($type, $object, $teaser = FALSE) {
  $links = array();
  
  // TODO: Perform logic to determine when link should appear
  $links['student_KEY1'] = array( // a regular link
    'title' => t('TODO: Fill in link title'),
    'href' => 'TODO: Fill in link path',
    'attributes' => array('title' => t('TODO: Fill in link title attribute.')),  
  );
  $links['student_KEY1'] = array( // a fake link that's just text
    'title' => t('TODO: Fill in link title'),
    'attributes' => array('title' => t('TODO: Fill in link title attribute.')),  
  );
  $links['student_KEY1'] = array( // a link that's we're sending as HTML
    'title' => t('TODO: Fill in link HTML'),
    'html' => TRUE,
  );
  // OPTIONAL: Add additional links
  
  return $links;
}


/**
 * Implementation of hook_forms().
 */
function student_forms($form_id, $args) {

}

function student_admin() {
  $form = array();

  $form['onthisdate_maxdisp'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of links'),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The maximum number of links to display in the block."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

