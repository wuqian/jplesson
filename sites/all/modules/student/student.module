<?php
// $Id$

/**
 * @file
 * Teacher Module
 */
module_load_include('inc', 'node', 'node.pages');

/**
 * Implementation of hook_menu().
 */
function student_menu() {
  $items['student'] = array(
    'title' => '学生平台',
  	'description' => '学习课程与实验、查看通知、完成作业与测试',
    'page callback' => 'student_task_list',
		'access arguments' => array('access content'), 
    'type' => MENU_NORMAL_ITEM,
  );
  $items['student/notices'] = array(
    'title' => '查看通知',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_notices'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/courses'] = array(
    'title' => '课程与实验',
 		'page callback' => 'student_courses',
  	'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/lessons'] = array(
    'title' => '课程与实验',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_lessons'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/tests'] = array(
    'title' => '作业',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_tests'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/test/%'] = array(
    'page callback' => 'student_test_form_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
  	'access arguments' => array('access student pages'), 
 		'type' => MENU_CALLBACK,
  );
  $items['student/tests/finished'] = array(
    'title' => '已提交作业',
 		'page callback' => 'student_tests_finish_list',
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/cisco'] = array(
    'title' => '绑定思科网院帐号',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_cisco_bind'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/paper/list']=array(
		'title' => t('试卷列表'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('student_examination_list'),
		'access arguments' => array('access student pages'),
		'type' => MENU_CALLBACK,
	);
	$items['student/paper/list/%']=array(
		'title' => t('试题'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('student_all', 3),
		'access arguments' => array('access student pages'),
		'type' => MENU_CALLBACK,
	);
  return $items;
}

function student_perm() {
	return array(
		'access student pages',
		'create student test content',
		'view own student test content',
    'view any student test content',
    'delete own student test content',
    'delete any student test content',
    'edit own student test content',
    'edit any student test content',
	);
}

function student_access($op, $node, $account) {
  if ($op == 'create') {
  	$result = db_query('SELECT type FROM {node} WHERE nid = %d', arg(2));
  	$type = db_result($result);
  	if($type == 'test') {
  		return TRUE;
  	}
  	else {
  		return FALSE;
  	}
  }
	if ($op == 'view') {
    if (user_access('view any student test content', $account) || (user_access('view own student test content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
  if ($op == 'update') {
    if (user_access('edit any student test content', $account) || (user_access('edit own student test content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
  if ($op == 'delete') {
    if (user_access('delete any student test content', $account) || (user_access('delete own student test content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
  return FALSE;
}

function student_theme() {
	return array(
	  'student_nodes_list' => array(
      'arguments' => array('form' => NULL),
    ),
    'student_test_submit' => array(
      'arguments' => array('form' => NULL),
    ),
    'student_examination_list' => array(
    	'arguments' => array('form' => array()),
    ),
	);
}

function student_task_list() {
	global $user;
	if(!user_access('access student pages')) {
		return MENU_ACCESS_DENIED;
	}
	$menu_items = array();
	$menu_items['个人资料'] = array(
  	'修改个人资料', 
  	array(
  		l('修改个人资料', 'user/'.$user->uid.'/edit'), 
  		l('绑定思科网院帐号', 'student/cisco'), 
  	),
  );
  $menu_items['通知'] = array(
  	'查看通知', 
  	array(
  		l('查看通知', 'student/notices'), 
  	),
  );
  $menu_items['课程与实验'] = array(
    '课程与实验学习、提问与答疑', 
  	array(
  		l('课程与实验列表', 'student/courses'), 
  	),
  );
  $menu_items['作业管理'] = array(
    '完成作业、查看作业反馈', 
  	array(
  		l('作业列表', 'student/tests'), 
  		l('已提交作业', 'student/tests/finished'), 
  	),
  );
  $menu_items['自测自评'] = array(
  	'自测自评',
  	array(
  		l('自测试卷列表','student/paper/list'),
  	),
  );
  $menu_items['师生互动'] = array(
  	'师生互动交流论坛',
  	array(
  		l('师生互动论坛','forum/14'),
  	),
  );
  $menu_items['扩展阅读'] = array(
  	'扩展阅读',
  	array(
  		l('路由与交换','node/79'),
  		l('计算机网络基础','node/80'),
  		l('安全协议','node/81'),
  		l('防火墙技术','node/82'),
  	),
  );
  global $base_url;
  $menu_items['常用链接'] = array(
  	'常用链接',
  	array(
  		l('<img src="' . $base_url . '/misc/free1_router.png"></img>', 'http://cisclab1.bjut.edu.cn', array('html' => TRUE)),
      l('<img src="' . $base_url . '/misc/free1_switch.png"></img>', 'http://cisclab2.bjut.edu.cn', array('html' => TRUE)),
  		l('<img src="' . $base_url . '/misc/cisco.png"></img>', 'http://www.cisco.com/web/learning/netacad/index.html', array('html' => TRUE)),
  	),
  );
  return theme('teacher_task_list', $menu_items);
}

function student_help($path, $arg) {
  global $base_url;
  switch ($path) {
    case 'student':
    	$output = '<p>'.'学习课程与实验、查看通知、完成作业与测试'.'<p>';
    	return $output;
  }
}

function student_notices() {
	global $user;
	if (!empty($user->class)) {
  	$result = pager_query('SELECT n.*, u.name, u.fullname FROM {node} n '.' INNER JOIN {users} u ON n.uid = u.uid '.' INNER JOIN {content_field_class} nc ON n.nid = nc.nid '.' WHERE n.type = "notice" AND n.status = 1 AND nc.field_class_value = "'.$user->class.'" ORDER BY n.changed DESC');
	}
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = array();
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => theme('username', $node));
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}

function student_courses() {
	$result = db_query('SELECT * FROM {term_data} WHERE vid = 1 ORDER BY weight ASC');
	$menu_items = array();
	while ($course = db_fetch_object($result)) {
		$lessons = db_query('SELECT n.* FROM {node} n '.' INNER JOIN {term_node} t ON n.nid = t.nid WHERE n.type = "lesson" AND t.tid = '.$course->tid.' AND n.status = 1 ORDER BY n.changed DESC');
		$lessons_list = array();
		while ($lesson = db_fetch_object($lessons)) {
			$lessons_list[] = l($lesson->title, 'node/'. $lesson->nid);
		}
		$menu_items[$course->name] = array(
			$course->description,
			$lessons_list,
		);
	}
  return theme('teacher_task_list', $menu_items);
}

function student_lessons() {
	
	$result = pager_query(db_rewrite_sql('SELECT n.*, u.name, u.fullname FROM {node} n '.' INNER JOIN {term_node} t ON n.nid = t.nid INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = "lesson" AND t.tid = 1 AND n.status = 1 ORDER BY n.changed DESC'), 50, 0, NULL);
	
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = array();
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => theme('username', $node));
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}


function student_tests() {
	global $user;
	if (!empty($user->class)) {
  	$result = pager_query('SELECT n.*, u.fullname, u.name FROM {node} n INNER JOIN {users} u ON n.uid = u.uid '.' INNER JOIN {content_field_class} nc ON n.nid = nc.nid '.' WHERE n.type = "test" AND n.status = 1 AND nc.field_class_value = "'.$user->class.'" ORDER BY n.changed DESC');
	}
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
  	
  	if (student_test_is_finished($node->nid)) {
  		$nodes[$node->nid] = '';
			$form['title'][$node->nid] = array('#value' => l($node->title, 'student/test/'. $node->nid));
    	$form['username'][$node->nid] = array('#value' => theme('username', $node));
    	$form['date'][$node->nid] = array('#value' => format_date($node->changed));
  	}
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}

function student_test_is_finished($test) {
	global $user;
	$result = db_query('SELECT n.nid FROM {tests} t INNER JOIN {node} n ON t.nid = n.nid WHERE n.uid = %d AND t.tid = %d', $user->uid, $test);
	$is_fin = db_fetch_object($result);
	return empty($is_fin);
}

/**
 * Student's test node info
 */
function student_node_info () {
	return array(
    'student_test_node' => array(
      'name' => t('学生作业'),
      'module' => 'student',
      'description' => t("学生作业"),
      'has_title' => TRUE,
      'title_label' => t('学生作业'),
      'has_body' => TRUE,
      'body_label' => t('学生作业'),
    )
  );
}

function student_test_form_page($test_id) {
	global $user;
	$result = db_query('SELECT type FROM {node} WHERE nid = %d', $test_id);
  $type = db_result($result);
	if($type == 'test') {
		$test = db_fetch_object(db_query('SELECT t.nid FROM {tests} t INNER JOIN {node} n ON t.nid = n.nid WHERE n.uid = %d AND t.tid = %d', $user->uid, $test_id));
		if(empty($test)) {
			return node_add('student_test_node');
		}
		else {
			return node_page_edit(node_load($test->nid));
		}
 	}
 	else {
 		return MENU_NOT_FOUND;
  }
}

/**
 * Submit test & works.
 */
function student_form(&$node, $form_state) {
	$type = node_get_types('type', $node);
	if(arg(2) == 'correct') {
		$result = db_query('SELECT tid FROM {tests} WHERE nid = %d', arg(3));
		$question = node_load(db_result($result));
		$form['question_field'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('问题描述'),
			'#prefix' => '<div class="description-field">',
			'#suffix' => '</div>',
	    '#description' => $question->body,
	    '#collapsible' => TRUE,
	    '#weight' => -50,
	  );
	  $form['answer_field'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('问题解答'),
			'#prefix' => '<div class="description-field">',
			'#suffix' => '</div>',
	    '#description' => $node->body,
	    '#collapsible' => TRUE,
	    '#weight' => -40,
	  );
	  $form['hide_field'] = array(
	    '#type' => 'fieldset',
	  	'#access' => FALSE,
	    '#collapsible' => TRUE,
	    '#weight' => -30,
	  );
	  $form['hide_field']['body_field'] = node_body_field($node, NULL, $type->min_word_count);
	  $form['remark_field'] = array(
	  	'#type' => 'fieldset',
	    '#title' => t('批改'),
	    '#collapsible' => TRUE,
	    '#weight' => -20,
	  );
	  $form['remark_field']['remark'] = array(
	  	'#type' => 'textarea',
	  	'#default_value' => $node->remark,
  		'#required' => TRUE,
	  );
	  $form['corrected'] = array(
	    '#type' => 'value',
	    '#value' => 1,
	  );
	}
	else {
		$question = node_load(arg(2));
	  $form['question_field'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('问题描述'),
			'#prefix' => '<div class="description-field">',
			'#suffix' => '</div>',
	    '#description' => $question->body,
	    '#collapsible' => TRUE,
	    '#weight' => -50,
	  );
	  $form['answer_field'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('填写答案'),
	    '#collapsible' => TRUE,
	    '#weight' => -40,
	  );
	  $form['answer_field']['body_field'] = node_body_field($node, NULL, $type->min_word_count);
	  if ($node->correct) {
	  	$form['remark_field'] = array(
		    '#type' => 'fieldset',
		    '#title' => t('教师批改'),
				'#prefix' => '<div class="description-field">',
				'#suffix' => '</div>',
		    '#description' => $node->remark,
		    '#collapsible' => TRUE,
		    '#weight' => -45,
		  );
	  }
	  
	  $form['test'] = array(
	    '#type' => 'value',
	    '#value' => arg(2),
	  );
	}
	return $form;
}


/**
 * Implementation of hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
function student_validate($node, &$form) {

}

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function student_insert($node) {
  db_query("INSERT INTO {tests} (nid, tid) VALUES (%d, %d)", $node->nid, $node->test);
}

function student_update($node) {
	if ($node->corrected == 1) {
		db_query("UPDATE {tests} SET remark = '%s', correct = %d WHERE nid = %d", $node->remark,$node->corrected, $node->nid);
	}
}

function student_load($node) {
  $additions = db_fetch_object(db_query('SELECT remark, correct FROM {tests} WHERE nid = %d', $node->nid));
  return $additions;
}

function student_form_alter(&$form, &$form_state, $form_id) {   
    if ($form_id == 'student_test_node_node_form') {
    	if(arg(2) == 'correct'){
    		drupal_set_title(t('批改作业'));
    	}
    	else {
    		drupal_set_title(t('提交作业'));
      	$form['#redirect'] = 'student/tests/finished';
    	}
    }
    return $form;
}

function theme_student_test_submit($form) {
	$output = "\n<div class=\"node-form\">\n";
  // Admin form fields and submit buttons must be rendered first, because
  // they need to go to the bottom of the form, and so should not be part of
  // the catch-all call to drupal_render().
  $buttons = drupal_render($form['buttons']);

  // Everything else gets rendered here, and is displayed before the admin form
  // field and the submit buttons.
  $output .= "  <div class=\"standard\">\n"; 
  $output .= drupal_render($form);
  $output .= "  </div>\n";

  $output .= $buttons;
  $output .= "</div>\n";

  return $output;
}

/**
 * Finished test & works list.
 */
function student_tests_finish_list() {
  global $user;
	$rows = array();

  $header = array(
    array('data' => t('标题')),
    array('data' => t('发布人')),
    array('data' => t('日期')),
    array('data' => t('已批改')),
  );
  $sql = "SELECT t.*, n.* FROM {tests} t INNER JOIN {node} n ON t.nid = n.nid WHERE n.uid = ".$user->uid;
  $tablesort = tablesort_sql($header);
  $result = pager_query($sql . $tablesort, 50);
  
  while ($test_fin = db_fetch_object($result)) {
  	$test_icon = null;
  	if ($test_fin->correct == 1) {
  		$test_icon = theme('image', 'misc/message-16-ok.png', t('已批改'), t('已批改'), array('class' => 'table-icon'));
  	}
  	else {
  		$test_icon = theme('image', 'misc/message-16-wait.png', t('未批改'), t('未批改'), array('class' => 'table-icon'));
  	}
  	$test = db_fetch_object(db_query('SELECT n.*, u.fullname FROM {node} n INNER JOIN {users} u ON n.uid = u.uid WHERE nid = %d', $test_fin->tid));
    $rows[] = array('data' =>
      array(
      	l($test->title,'student/test/'.$test->nid),
      	theme('username', $test),
      	format_date($test->created),
      	$test_icon,
      )
    );
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('无已完成作业.'), 'colspan' => 6));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);

  return $output;
}

function theme_student_nodes_list($form) {
	// If there are rows in this form, then $form['title'] contains a list of
  // the title form elements.
  $has_posts = isset($form['title']) && is_array($form['title']);
  $select_header = $has_posts ? theme('table_select_header_cell') : '';
  $header = array(t('Title'), t('Author'), t('Date'));
  $output = '';
  $output .= drupal_render($form['options']);
  if ($has_posts) {
    foreach (element_children($form['title']) as $key) {
      $row = array();
      $row[] = drupal_render($form['title'][$key]);
      $row[] = drupal_render($form['username'][$key]);
      $row[] = drupal_render($form['date'][$key]);
      $rows[] = $row;
    }

  }
  else {
    $rows[] = array(array('data' => t('无内容'), 'colspan' => '6'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}

function student_cisco_bind() {
	$form['cisco_id'] = array(
  '#type' => 'textfield',
  '#title' => t('输入思科网院ID(Academy Connection ID)'),
  '#size' => 30,
  '#maxlength' => 30,
  '#required' => TRUE,
);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('绑定'),
	);
	return $form;
}

function student_cisco_bind_submit($form, &$form_state) {
	global $user;
	$result = db_query("SELECT * FROM {cisco} WHERE acid = '%s'", $form_state['values']['cisco_id']);
	if(db_fetch_object($result)) {
		$update = db_query('UPDATE {users} SET cisco_id = "%s" WHERE uid = %d', $form_state['values']['cisco_id'], $user->uid);
		if($update) {
			drupal_set_message('绑定成功');
		} else {
			drupal_set_message('绑定失败，请检查输入格式', 'error');
		}
	}
	else {
		drupal_set_message('此思科网院ID不存在', 'error');
	}
}
/*
 * Examination list
 */
/*function student_examination_list(&$form_state){
	$h = db_result(db_query("SELECT pid from {questionpaper} limit 0,1"));
	$e = db_result(db_query("SELECT pid from {questionpaper} order by pid desc limit 0,1"));
	
	for($i=$h;$i<=$e;$i++){
		if($pid = db_result(pager_query("SELECT pid FROM {questionpaper} WHERE pid=$i", 1, 0, NULL))){
		$form[][$i] = array(
			'#type' => 'item',
			'#value' => l(t('The examination paper of'.' '.$pid),"student/paper/list/".$pid),
		);
		}
		$form['pager'] = array('#value' => theme('pager', NULL, 1, 0));
	}
	return $form;
}*/
 function student_examination_list(&$form_state){
  global $user;
  $student_id = $user->uid;
  $class = $user->class;
  //todo: 使用like对班级进行模糊匹配,可能会引入bug;
  //在没有班级实体的情况下,暂用此这种方案
	$result = pager_query("SELECT * FROM {questionpaper} WHERE class_id LIKE '%$class%'", 20, 0, NULL);
	
	while($term = db_fetch_object($result)){
		$results[] = $term;
	}
    
	$form = array('#tree' => TRUE);
	if(!empty($results)) {
		foreach($results as $res){
			$form[$res->pid]['#config'] = (array)$res;
			$form[$res->pid]['pid'] = array('#value' => check_plain($res->title));
      $class_id = implode(',', unserialize($res->class_id));
			$form[$res->pid]['class_id'] = array('#value' => $class_id);

            //根据questionpaper_id,student_id 查找答题记录
            $questionpaper_id = $res->pid;
            $answer_resutls = pager_query("SELECT * FROM {answer} WHERE student_id = $student_id AND questionpaper_id = $questionpaper_id", 20, 0, NULL);
            $answer = NULL;
            while($tmp = db_fetch_object($answer_resutls)){
                $answer = $tmp;
            }

            if (!$answer != NULL) {
                //如果answers(student_id,questionpaper_id)不存在,显示 答题
                $form[$res->pid]['check'] = array('#value' => l(t('答题'),"student/paper/list/".$res->pid));
            } elseif ($answer->stat == 1) {
                //如果已经判卷未完成,显示　判卷中
                $form[$res->pid]['check'] = array('#value' => check_plain('判卷中'));
            } elseif ($answer->stat == 2) {
                //如果已经判卷未完成,显示　已完成
                $form[$res->pid]['check'] = array('#value' => check_plain('已完成'));
            }

            //krumo::dump($answer);
            //如果已经判卷完成,显示　考分查看结果
            if ($answer != NULL && $answer->stat == 2) {
                $form[$res->pid]['score'] = array('#value' => check_plain($answer->score));
                //krumo::dump($answer);
            } else {
                $form[$res->pid]['score'] = array('#value' => '');
            }
		}
	} else {
		$form['empty'] = array('#type' => 'markup', '#value' => "没有试卷");
	}
	if(count($res) > 1){
		$form['submit'] = array('#type' => 'submit','#value' => t('Save'));
	}
	else if(isset($res)){
		unset($form[$res->pid]['weight']);
	}
	$form['pager'] = array('#value' => theme('pager', NULL, 20, 0));
	return $form;
}
function student_examination_list_submit(){
	foreach($form_state['values'] as $pid => $vocabulary){
		if(is_numeric($pid) && $form[$pid]['#vocabulary']['weight'] != $form_state['values'][$pid]['weight']){
			$form[$pid]['#vocabulary']['weight'] = $form_state['values'][$pid]['weight'];
			taxonomy_save_vocabulary($form[$pid]['#vocabulary']);
		}
	}
}
function theme_student_examination_list($form){
	$rows = array();
	foreach(element_children($form) as $key){
		if(isset($form[$key]['pid'])){
			$vocabulary = &$form[$key];
			
			$row = array();
			$row[] = drupal_render($vocabulary['pid']);
			$row[] = drupal_render($vocabulary['class_id']);
			$row[] = drupal_render($vocabulary['check']);
            $row[] = drupal_render($vocabulary['score']);

			if(isset($vocabulary['weight'])){
				$vocabulary['weight']['#attributes']['class'] = 'vocabulary-weight';
				$row[] = drupal_render($vocabulary['weight']);
			}
			$rows[] = array('data' => $row,'class' => 'student-listss');
		}
	}
	if(empty($rows)){
		$rows = array(array('data' => t('No vocabulary'),'colspan' => 2));
	}
	$header = array(t('试卷列表'),t('班级'),t('编辑'),t('考分'));
	if(isset($form['submit'])){
		$header[] = t('weight');
		drupal_add_tabledrag('taxonomy','order','sibling','vocabulary-weight'); 
	}
	return theme('table',$header,$rows,array('id'=>'student-list')).drupal_render($form);
}

/*
 * Generating examination paper;
 */
function student_all(&$form_state, $questionpaper_id) {
	$form = array();

    $form['questionpaper_id'] = array(
        '#type' => 'value',
        '#value' => $questionpaper_id
    );

	$questions = db_result(db_query("SELECT questions FROM {questionpaper} WHERE pid=$questionpaper_id"));
	$questions = unserialize($questions);

    
    //从数据库中获取question的详细信息
    $result = db_query('SELECT * FROM {question} WHERE id IN (%s) ORDER BY type ASC', implode(",", $questions));

    //分组标题打印flag
    $flags['text'] = 0;
    $flags['option'] = 0;
    $flags['true_false'] = 0;
    $flags['multiple_option'] = 0;
    //将题目输出到表单
    $index = 1;
                if ($flags['text'] == 0) {
              $flags['text'] = 1;
              $form['hello'] = array(
                '#type' => 'item',
                '#title' => '选择题'
              );
            }
    while($question = db_fetch_object($result)){
        //为题目创建form:(区分选择题＆问答题)
        if ($question->type == 'text') {
            if ($flags['text'] == 0) {
              $flags['text'] = 1;
              $form['text'] = array(
                '#type' => 'item',
                '#title' => '问答题'
              );
            }
            //问答题
            //krumo::dump("text");
            $form[$question->id][$question->id] = array(
                '#type' => 'textarea',
                '#title' => $index.'.'.$question->topic,
            );
        } elseif ($question->type == 'option') {
            if ($flags['option'] == 0) {
              $flags['option'] = 1;
              $form['option'] = array(
                '#type' => 'item',
                '#title' => '选择题'
              );
            }
            //选择题
            $form[$question->id][$question->id.'topic'] = array(
                '#type' => 'item',
                //'#default_value' => '1',
                '#title' => $index.'.'.$question->topic,
            );
            $arr = unserialize($question->option_a);
            $form[$question->id][$question->id] = array(
                '#type' => 'radios',
                '#options' => $arr,
            );
        } elseif ($question->type == 'true_false') {
            if ($flags['true_false'] == 0) {
              $flags['true_false'] = 1;
              $form['true_false'] = array(
                '#type' => 'item',
                '#title' => '判断题'
              );
            }
            $form[$question->id][$question->id.'topic'] = array(
                '#type' => 'item',
                '#title' => $index.'.'.$question->topic,
            );
            $form[$question->id][$question->id] = array(
                '#type' => 'radios',
                '#options' => array("错误","正确"),
            );
        } elseif ($question->type == 'multiple_option') {
            if ($flags['multiple_option'] == 0) {
              $flags['multiple_option'] = 1;
              $form['multiple_option'] = array(
                '#type' => 'item',
                '#title' => '多选题'
              );
            }
            $form[$question->id][$question->id.'topic'] = array(
                '#type' => 'item',
                '#title' => $index.'.'.$question->topic,
            );
            $options = unserialize($question->option_a);
            foreach ($options as $key=>$option) {
                $form[$question->id][$question->id.'-'.$key] = array(
                    '#type' => 'checkbox',
                    '#title' => $option
                ); 
            }
        } else {
            krumo::dump("unknown question type");
        }
        $index ++;
    }

    //krumo::dump($form);
	$form['#validate'] = array('student_all_validate');
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => '提交',
		'#submit' => array('student_all_submit'),
	);
	
	return $form;
}

/*
 * Students submit answer validate;
 * 
 */
function student_all_validate(&$form,&$form_state){
	// $i=1;
	// $op = $form_state['values']['pid'];
	
	// $resultarr = db_result(db_query("select options from {questionpaper} where pid=$op"));
	// $resultarrs = unserialize($resultarr);

 //    //$resultarrs_key = array_keys($resultarrs);
	// $results_values = array_values($resultarrs);
	// for($i=0;$i<count($results_values);$i++){
	// $subject_maxdisp = $results_values[$i];
	// if($subject_maxdisp != $_POST[$i+1]){
	// 	form_set_error('$i','Enter your answer is wrong,please input again');
	// 	}
	// }
}
/*
 * Submit answers to subject data sheet;
 */
function student_all_submit(&$form,&$form_state){
	global $user;
    //获取试卷id
	$questionpaper_id = $form_state['values']['questionpaper_id'];
    $questions = db_result(db_query("SELECT questions FROM {questionpaper} WHERE pid=$questionpaper_id"));
    //获取试题id列表
    $questions = unserialize($questions);
	//krumo::dump($questionpaper_id);
    
    //从表单中获取答题结果
    $answers = array();
    foreach ($questions as $question) {
        //多选题需要将答题结果进行处理后存入
        //读取数据库判断题目类型,对多选题的答案做特殊处理
        $result = db_query("SELECT * FROM {question} WHERE id=$question");
        $q = db_fetch_object($result);
        //krumo::dump($q);
        if ($q->type == 'multiple_option') {
            $answers[$question] = '';
            $options = unserialize($q->option_a);
            foreach ($options as $key => $value) {
                //if option index is unchecked 
                if ($form_state['values'][$question.'-'.$key] == 0){
                    continue;
                }
                $answers[$question] .= $key+1;
            };
        } else {
            //单选,判断,问答题:处理相对简单
            $answers[$question] = $form_state['values'][$question];
        }
        //krumo::dump($answers [$question]);
    }

    //将答案序列化存入数据库中
    db_query("INSERT INTO {answer} (id,answers,student_id,questionpaper_id,stat,score)
            VALUES(null,'%s',%d, %d, %d, %d)",
            serialize($answers),
            $user->uid,
            $questionpaper_id,
            0,
            0);
    $answer_id = db_last_insert_id('answer','id');

    //触发自动化判卷
    //找到题目列表中的选择题,读取选择题答案,答案一致则加该题目的分值
    $score = 0;
    $result = db_query('SELECT * FROM {question} WHERE id IN (%s)',implode(",", $questions));
    //krumo::dump(implode(",", $questions)); 
    $manual_flag = 0;
    while($question = db_fetch_object($result)){

        if ($question->type == 'text') {
            //问答题老师手工判卷
            $manual_flag = 1;
            continue;
        } elseif  ($question->type == 'option') {
            if ($answers [$question->id] == $question->correct) {
                $score += $question->score;
            }
        } elseif  ($question->type == 'true_false') {
            if ($answers [$question->id] == $question->correct) {
                $score += $question->score;
            }
        } elseif  ($question->type == 'multiple_option') {
            //多选题如何判题,如何给分
            //分解答案列表
            $answer_array = str_split($answers[$question->id]);
            sort($answer_array);
            //分解正确答案列表
            $correct_array = str_split($question->correct);
            sort($correct_array);
            $intersect_array = array_intersect($answer_array,$correct_array);
            // krumo::dump($answers[$question->id]);
            // krumo::dump($answer_array);
            // krumo::dump('multiple_option');
            // krumo::dump($question->correct);
            //题目状态:[0=>'错误', 1=>'半对', 2=>'全对']
            $stat = '2';
            if ($answer_array == $correct_array) {
                //答案 == 正确答案, 结果正确
                $stat = '2';
                $score += $question->score;
            } elseif ($answer_array == $intersect_array) {
                //如果$answer_array 和 $correct_array的交集 == $answer_array
                //答案算半对
                $stat = '1';
                //获取多选题,判分规则
                //krumo::dump('semi');
                switch ($question->score_strategy) {
                    case 0:
                        //半对的时候,不给分
                        $score += 0;
                        break;
                    case 1:
                        //半对的时候,给一半分
                        $score += $question->score/2;
                        break;
                    case 2:
                        break;
                    default:
                        # code...
                        break;
                }
            } else {
                //否则,答案错误
                $stat = '0';
                $score += 0;
            }
        } else {
            echo "error";
        }
    }
    

    //需要老师手工对问答题进行批改
    if ($manual_flag == 1) {
        //更新数据库score & stat
        db_query("UPDATE answer SET score = '%d', stat = 1 where id = %d",$score,$answer_id);
    } elseif ($manual_flag == 0) {
        //没有问答题,直接判卷
        db_query("UPDATE answer SET score = '%d', stat = 2 where id = %d",$score,$answer_id);
    }


	if(db_last_insert_id('answer','id')){
		drupal_set_message('Successfull input');
		
	}
}
