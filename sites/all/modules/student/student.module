<?php
// $Id$

/**
 * @file
 * Teacher Module
 */
module_load_include('inc', 'node', 'node.pages');

/**
 * Implementation of hook_menu().
 */
function student_menu() {
  $items['student'] = array(
    'title' => '学生平台',
  	'description' => '学习课程与实验、查看通知、完成作业与测试',
    'page callback' => 'student_task_list',
		'access arguments' => array('access content'), 
    'type' => MENU_NORMAL_ITEM,
  );
  $items['student/notices'] = array(
    'title' => '查看通知',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_notices'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/courses'] = array(
    'title' => '课程与实验',
 		'page callback' => 'student_courses',
  	'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/lessons'] = array(
    'title' => '课程与实验',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_lessons'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/tests'] = array(
    'title' => '作业',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_tests'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/test/%'] = array(
    'page callback' => 'student_test_form_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
  	'access arguments' => array('access student pages'), 
 		'type' => MENU_CALLBACK,
  );
  $items['student/tests/finished'] = array(
    'title' => '已提交作业',
 		'page callback' => 'student_tests_finish_list',
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['student/cisco'] = array(
    'title' => '绑定思科网院帐号',
 		'page callback' => 'drupal_get_form',
    'page arguments' => array('student_cisco_bind'),
  	'access arguments' => array('access student pages'), 
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function student_perm() {
	return array(
		'access student pages',
		'create student test content',
		'view own student test content',
    'view any student test content',
    'delete own student test content',
    'delete any student test content',
    'edit own student test content',
    'edit any student test content',
	);
}

function student_access($op, $node, $account) {
  if ($op == 'create') {
  	$result = db_query('SELECT type FROM {node} WHERE nid = %d', arg(2));
  	$type = db_result($result);
  	if($type == 'test') {
  		return TRUE;
  	}
  	else {
  		return FALSE;
  	}
  }
	if ($op == 'view') {
    if (user_access('view any student test content', $account) || (user_access('view own student test content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
  if ($op == 'update') {
    if (user_access('edit any student test content', $account) || (user_access('edit own student test content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
  if ($op == 'delete') {
    if (user_access('delete any student test content', $account) || (user_access('delete own student test content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
  return FALSE;
}

function student_theme() {
	return array(
	  'student_nodes_list' => array(
      'arguments' => array('form' => NULL),
    ),
    'student_test_submit' => array(
      'arguments' => array('form' => NULL),
    ),
	);
}

function student_task_list() {
	global $user;
	if(!user_access('access student pages')) {
		return MENU_ACCESS_DENIED;
	}
	$menu_items = array();
	$menu_items['个人资料'] = array(
  	'修改个人资料', 
  	array(
  		l('修改个人资料', 'user/'.$user->uid.'/edit'), 
  		l('绑定思科网院帐号', 'student/cisco'), 
  	),
  );
  $menu_items['通知'] = array(
  	'查看通知', 
  	array(
  		l('查看通知', 'student/notices'), 
  	),
  );
  $menu_items['课程与实验'] = array(
    '课程与实验学习、提问与答疑', 
  	array(
  		l('课程与实验列表', 'student/courses'), 
  	),
  );
  $menu_items['作业管理'] = array(
    '完成作业、查看作业反馈', 
  	array(
  		l('作业列表', 'student/tests'), 
  		l('已提交作业', 'student/tests/finished'), 
  	),
  );
  return theme('teacher_task_list', $menu_items);
}

function student_help($path, $arg) {
  global $base_url;
  switch ($path) {
    case 'student':
    	$output = '<p>'.'学习课程与实验、查看通知、完成作业与测试'.'<p>';
    	return $output;
  }
}

function student_notices() {
	global $user;
	if (!empty($user->class)) {
  	$result = pager_query('SELECT n.*, u.name, u.fullname FROM {node} n '.' INNER JOIN {users} u ON n.uid = u.uid '.' INNER JOIN {content_field_class} nc ON n.nid = nc.nid '.' WHERE n.type = "notice" AND n.status = 1 AND nc.field_class_value = '.$user->class.' ORDER BY n.changed DESC');
	}
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = array();
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => theme('username', $node));
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}

function student_courses() {
	$result = db_query('SELECT * FROM {term_data} WHERE vid = 1 ORDER BY weight ASC');
	$menu_items = array();
	while ($course = db_fetch_object($result)) {
		$lessons = db_query('SELECT n.* FROM {node} n '.' INNER JOIN {term_node} t ON n.nid = t.nid WHERE n.type = "lesson" AND t.tid = '.$course->tid.' AND n.status = 1 ORDER BY n.changed DESC');
		$lessons_list = array();
		while ($lesson = db_fetch_object($lessons)) {
			$lessons_list[] = l($lesson->title, 'node/'. $lesson->nid);
		}
		$menu_items[$course->name] = array(
			$course->description,
			$lessons_list,
		);
	}
  return theme('teacher_task_list', $menu_items);
}

function student_lessons() {
	
	$result = pager_query(db_rewrite_sql('SELECT n.*, u.name, u.fullname FROM {node} n '.' INNER JOIN {term_node} t ON n.nid = t.nid INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = "lesson" AND t.tid = 1 AND n.status = 1 ORDER BY n.changed DESC'), 50, 0, NULL);
	
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = array();
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => theme('username', $node));
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}


function student_tests() {
	global $user;
	if (!empty($user->class)) {
  	$result = pager_query('SELECT n.*, u.fullname, u.name FROM {node} n INNER JOIN {users} u ON n.uid = u.uid '.' INNER JOIN {content_field_class} nc ON n.nid = nc.nid '.' WHERE n.type = "test" AND n.status = 1 AND nc.field_class_value = '.$user->class.' ORDER BY n.changed DESC');
	}
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
  	
  	if (student_test_is_finished($node->nid)) {
  		$nodes[$node->nid] = '';
			$form['title'][$node->nid] = array('#value' => l($node->title, 'student/test/'. $node->nid));
    	$form['username'][$node->nid] = array('#value' => theme('username', $node));
    	$form['date'][$node->nid] = array('#value' => format_date($node->changed));
  	}
  }
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'student_nodes_list';
  return $form;
}

function student_test_is_finished($test) {
	global $user;
	$result = db_query('SELECT n.nid FROM {tests} t INNER JOIN {node} n ON t.nid = n.nid WHERE n.uid = %d AND t.tid = %d', $user->uid, $test);
	$is_fin = db_fetch_object($result);
	return empty($is_fin);
}

/**
 * Student's test node info
 */
function student_node_info () {
	return array(
    'student_test_node' => array(
      'name' => t('学生作业'),
      'module' => 'student',
      'description' => t("学生作业"),
      'has_title' => TRUE,
      'title_label' => t('学生作业'),
      'has_body' => TRUE,
      'body_label' => t('学生作业'),
    )
  );
}

function student_test_form_page($test_id) {
	global $user;
	$result = db_query('SELECT type FROM {node} WHERE nid = %d', $test_id);
  $type = db_result($result);
	if($type == 'test') {
		$test = db_fetch_object(db_query('SELECT t.nid FROM {tests} t INNER JOIN {node} n ON t.nid = n.nid WHERE n.uid = %d AND t.tid = %d', $user->uid, $test_id));
		if(empty($test)) {
			return node_add('student_test_node');
		}
		else {
			return node_page_edit(node_load($test->nid));
		}
 	}
 	else {
 		return MENU_NOT_FOUND;
  }
}

/**
 * Submit test & works.
 */
function student_form(&$node, $form_state) {
	$type = node_get_types('type', $node);
	if(arg(2) == 'correct') {
		$result = db_query('SELECT tid FROM {tests} WHERE nid = %d', arg(3));
		$question = node_load(db_result($result));
		$form['question_field'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('问题描述'),
			'#prefix' => '<div class="description-field">',
			'#suffix' => '</div>',
	    '#description' => $question->body,
	    '#collapsible' => TRUE,
	    '#weight' => -50,
	  );
	  $form['answer_field'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('问题解答'),
			'#prefix' => '<div class="description-field">',
			'#suffix' => '</div>',
	    '#description' => $node->body,
	    '#collapsible' => TRUE,
	    '#weight' => -40,
	  );
	  $form['hide_field'] = array(
	    '#type' => 'fieldset',
	  	'#access' => FALSE,
	    '#collapsible' => TRUE,
	    '#weight' => -30,
	  );
	  $form['hide_field']['body_field'] = node_body_field($node, NULL, $type->min_word_count);
	  $form['remark_field'] = array(
	  	'#type' => 'fieldset',
	    '#title' => t('批改'),
	    '#collapsible' => TRUE,
	    '#weight' => -20,
	  );
	  $form['remark_field']['remark'] = array(
	  	'#type' => 'textarea',
	  	'#default_value' => $node->remark,
  		'#required' => TRUE,
	  );
	  $form['corrected'] = array(
	    '#type' => 'value',
	    '#value' => 1,
	  );
	}
	else {
		$question = node_load(arg(2));
	  $form['question_field'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('问题描述'),
			'#prefix' => '<div class="description-field">',
			'#suffix' => '</div>',
	    '#description' => $question->body,
	    '#collapsible' => TRUE,
	    '#weight' => -50,
	  );
	  $form['answer_field'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('填写答案'),
	    '#collapsible' => TRUE,
	    '#weight' => -40,
	  );
	  $form['answer_field']['body_field'] = node_body_field($node, NULL, $type->min_word_count);
	  if ($node->correct) {
	  	$form['remark_field'] = array(
		    '#type' => 'fieldset',
		    '#title' => t('教师批改'),
				'#prefix' => '<div class="description-field">',
				'#suffix' => '</div>',
		    '#description' => $node->remark,
		    '#collapsible' => TRUE,
		    '#weight' => -45,
		  );
	  }
	  
	  $form['test'] = array(
	    '#type' => 'value',
	    '#value' => arg(2),
	  );
	}
	return $form;
}


/**
 * Implementation of hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
function student_validate($node, &$form) {

}

/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function student_insert($node) {
  db_query("INSERT INTO {tests} (nid, tid) VALUES (%d, %d)", $node->nid, $node->test);
}

function student_update($node) {
	if ($node->corrected == 1) {
		db_query("UPDATE {tests} SET remark = '%s', correct = %d WHERE nid = %d", $node->remark,$node->corrected, $node->nid);
	}
}

function student_load($node) {
  $additions = db_fetch_object(db_query('SELECT remark, correct FROM {tests} WHERE nid = %d', $node->nid));
  return $additions;
}

function student_form_alter(&$form, &$form_state, $form_id) {   
    if ($form_id == 'student_test_node_node_form') {
    	if(arg(2) == 'correct'){
    		drupal_set_title(t('批改作业'));
    	}
    	else {
    		drupal_set_title(t('提交作业'));
      	$form['#redirect'] = 'student/tests/finished';
    	}
    }
    return $form;
}

function theme_student_test_submit($form) {
	$output = "\n<div class=\"node-form\">\n";
  // Admin form fields and submit buttons must be rendered first, because
  // they need to go to the bottom of the form, and so should not be part of
  // the catch-all call to drupal_render().
  $buttons = drupal_render($form['buttons']);

  // Everything else gets rendered here, and is displayed before the admin form
  // field and the submit buttons.
  $output .= "  <div class=\"standard\">\n"; 
  $output .= drupal_render($form);
  $output .= "  </div>\n";

  $output .= $buttons;
  $output .= "</div>\n";

  return $output;
}

/**
 * Finished test & works list.
 */
function student_tests_finish_list() {
  global $user;
	$rows = array();

  $header = array(
    array('data' => t('标题')),
    array('data' => t('发布人')),
    array('data' => t('日期')),
    array('data' => t('已批改')),
  );
  $sql = "SELECT t.*, n.* FROM {tests} t INNER JOIN {node} n ON t.nid = n.nid WHERE n.uid = ".$user->uid;
  $tablesort = tablesort_sql($header);
  $result = pager_query($sql . $tablesort, 50);
  
  while ($test_fin = db_fetch_object($result)) {
  	$test_icon = null;
  	if ($test_fin->correct == 1) {
  		$test_icon = theme('image', 'misc/message-16-ok.png', t('已批改'), t('已批改'), array('class' => 'table-icon'));
  	}
  	else {
  		$test_icon = theme('image', 'misc/message-16-wait.png', t('未批改'), t('未批改'), array('class' => 'table-icon'));
  	}
  	$test = db_fetch_object(db_query('SELECT n.*, u.fullname FROM {node} n INNER JOIN {users} u ON n.uid = u.uid WHERE nid = %d', $test_fin->tid));
    $rows[] = array('data' =>
      array(
      	l($test->title,'student/test/'.$test->nid),
      	theme('username', $test),
      	format_date($test->created),
      	$test_icon,
      )
    );
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('无已完成作业.'), 'colspan' => 6));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);

  return $output;
}

function theme_student_nodes_list($form) {
	// If there are rows in this form, then $form['title'] contains a list of
  // the title form elements.
  $has_posts = isset($form['title']) && is_array($form['title']);
  $select_header = $has_posts ? theme('table_select_header_cell') : '';
  $header = array(t('Title'), t('Author'), t('Date'));
  $output = '';
  $output .= drupal_render($form['options']);
  if ($has_posts) {
    foreach (element_children($form['title']) as $key) {
      $row = array();
      $row[] = drupal_render($form['title'][$key]);
      $row[] = drupal_render($form['username'][$key]);
      $row[] = drupal_render($form['date'][$key]);
      $rows[] = $row;
    }

  }
  else {
    $rows[] = array(array('data' => t('No posts available.'), 'colspan' => '6'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}

function student_cisco_bind() {
	$form['cisco_id'] = array(
  '#type' => 'textfield',
  '#title' => t('输入思科网院ID(Academy Connection ID)'),
  '#size' => 30,
  '#maxlength' => 30,
  '#required' => TRUE,
);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('绑定'),
	);
	return $form;
}

function student_cisco_bind_submit($form, &$form_state) {
	global $user;
	$result = db_query("SELECT * FROM {cisco} WHERE acid = '%s'", $form_state['values']['cisco_id']);
	if(db_fetch_object($result)) {
		$update = db_query('UPDATE {users} SET cisco_id = "%s" WHERE uid = %d', $form_state['values']['cisco_id'], $user->uid);
		if($update) {
			drupal_set_message('绑定成功');
		} else {
			drupal_set_message('绑定失败，请检查输入格式', 'error');
		}
	}
	else {
		drupal_set_message('此思科网院ID不存在', 'error');
	}
}