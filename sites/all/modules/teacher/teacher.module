<?php
// $Id$

/**
 * @file
 * Teacher Module
 */

module_load_include('inc', 'node', 'node.pages');

/**
 * Implementation of hook_menu().
 */
function teacher_menu() {
  $items['teacher'] = array(
    'title' => '教师平台',
  	'description' => '发布通知、管理课程、管理作业、管理学生信息',
    'page callback' => 'teacher_task_list',
		'access arguments' => array('access content'), 
    'type' => MENU_NORMAL_ITEM,
  );
  $items['teacher/notices'] = array(
    'title' => '通知管理',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teacher_admin_notices'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/courses'] = array(
    'title' => '课程管理',
    'page callback' => 'teacher_admin_courses',
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/courses/edit'] = array(
    'title' => '修改课程分类',
    'page callback' => 'teacher_admin_courses_edit',
    'access arguments' => array('access teacher pages'),
    'type' => MENU_CALLBACK,
  );
  $items['teacher/courses/add'] = array(
    'title' => '添加课程分类',
    'page callback' => 'teacher_admin_courses_add',
    'access arguments' => array('access teacher pages'),
    'type' => MENU_CALLBACK,
  );
  $items['teacher/lessons/%'] = array(
    'title' => '课程管理',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teacher_admin_lessons', 2),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/tests'] = array(
    'title' => '作业管理',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teacher_admin_tests'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/test/%'] = array(
    'title' => '已提交作业列表',
    'page callback' => 'teacher_admin_test_list',
  	'page arguments' => array(2),
  	'access callback' => 'teacher_admin_test_list_access',
  	'access arguments' => array(2), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/test/correct/%node'] = array(
    'title' => '已提交作业列表',
    'page callback' => 'node_page_edit',
  	'page arguments' => array(3),
  	'access callback' => 'teacher_test_correct_access', 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/students'] = array(
    'title' => '学生管理',
    'page callback' => 'teacher_students',
  	'page arguments' => array('list'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/students/add'] = array(
    'title' => '添加学生用户',
    'page arguments' => array('add'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/students/import/user'] = array(
    'title' => '批量导入学生用户',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teacher_admin_import_user'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/students/import/cisco'] = array(
    'title' => '导入思科网院用户信息',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teacher_admin_import_cisco'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/news'] = array(
    'title' => '新闻管理',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teacher_admin_news'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/lessons/new'] = array(
    'title' => '添加课程',
    'page callback' => 'node_add',
    'page arguments' => array('lesson'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'lesson'),
   );
   $items['teacher/news/add'] = array(
    'title' => '添加课程',
    'page callback' => 'node_add',
    'page arguments' => array('news'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'news'),
   );
   $items['teacher/notices/new'] = array(
    'title' => '添加课程',
    'page callback' => 'node_add',
    'page arguments' => array('notice'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'notice'),
   );
   $items['teacher/tests/new'] = array(
    'title' => '添加课程',
    'page callback' => 'node_add',
    'page arguments' => array('test'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'test'),
   );
  return $items;
}

function teacher_perm() {
	return array('access teacher pages');
}

function teacher_theme() {
	return array(
    'teacher_task_list' => array(
      'arguments' => array('menu_items' => NULL),
    ),
    'teacher_students_account_list' => array(
      'arguments' => array('form' => NULL),
    ),
    'teacher_students_filter' => array(
      'arguments' => array('form' => NULL),
    ),
    'teacher_admin_nodes' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}


function teacher_task_list() {
	if(!user_access('access teacher pages')) {
		return MENU_ACCESS_DENIED;
	}
	$menu_items = array();
	$menu_items['个人资料'] = array(
  	'修改个人资料', 
  	array(
  		l('修改个人资料', 'user/'.$user->uid.'/edit'), 
  	),
  );
  $menu_items['通知管理'] = array(
  	'通知发布与管理', 
  	array(
  		l('发布新通知', 'teacher/notices/new'), 
  		l('通知管理', 'teacher/notices/'), 
  	),
  );
  $menu_items['课程管理'] = array(
    '添加、删除、修改课程，管理课程可见性', 
  	array(
  		l('发布新课程', 'teacher/lessons/new'), 
  		l('课程管理', 'teacher/courses'), 
  	),
  );
  $menu_items['作业管理'] = array(
    '作业发布与管理、查看作业提交状态', 
  	array(
  		l('发布新作业', 'teacher/tests/new'), 
  		l('作业管理与批改', 'teacher/tests'), 
  	),
  );
  $menu_items['学生管理'] = array(
  	'学生基本信息查看与管理', 
  	array(
  		l('添加用户', 'teacher/students/add'), 
  		l('学生管理', 'teacher/students'), 
  		l('批量导入学生用户', 'teacher/students/import/user'), 
  		l('导入思科网院用户信息', 'teacher/students/import/cisco'), 
  	),
  );
  $menu_items['新闻管理'] = array(
  	'发布与管理最新动态', 
  	array(
  		l('添加新闻', 'teacher/news/add'), 
  		l('新闻管理', 'teacher/news'), 
  	),
  );
  return theme('teacher_task_list', $menu_items);
}

function teacher_help($path, $arg) {
  global $base_url;
  switch ($path) {
    case 'teacher':
    	$output = '<p>'.'发布通知、管理课程、管理作业、管理学生信息'.'<p>';
    	return $output;
    case 'teacher/courses':
    	$output = '<p>'.'修改、删除课程，管理课程可见性'.'<p>';
    	return $output;
  }
}

function theme_teacher_task_list($menu_items) {
  $stripe = 0;
  $output = '';
  $container = array('left' => '', 'right' => '');
  $flip = array('left' => 'right', 'right' => 'left');
  $position = 'left';

  // Iterate over all modules
  foreach ($menu_items as $module => $block) {
    list($description, $items) = $block;

    // Output links
    if (count($items)) {
      $block = array();
      $block['title'] = $module;
      $block['content'] = theme('item_list', $items);
      $block['description'] = t($description);

      if ($block_output = theme('admin_block', $block)) {
        if (!isset($block['position'])) {
          // Perform automatic striping.
          $block['position'] = $position;
          $position = $flip[$position];
        }
        $container[$block['position']] .= $block_output;
      }
    }
  }

  $output = '<div class="admin clear-block">';
  foreach ($container as $id => $data) {
    $output .= '<div class="'. $id .' clear-block">';
    $output .= $data;
    $output .= '</div>';
  }
  $output .= '</div>';

  return $output;
}

function _teacher_admin_excel_filter($data) {
	preg_match('/[a-zA-Z0-9_\-]+/', $data, $matches);
	return $matches[0];
}

function teacher_admin_import_user() {
	$form['#attributes'] = array('enctype' => "multipart/form-data");
	$form['upload'] = array(
		'#type' => 'file',
		'#title' => t('选择要导入的学生数据表格'),
		'#description' => t('文件必须是XLS格式'),
		'#size' => 40,
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('导入'),
	);
	return $form;
}

function teacher_admin_import_user_submit($form, &$form_state) {
	require_once 'excel_reader2.php';
	$dest = file_directory_path();
	if($file = file_save_upload('upload', array('file_validate_extensions' => array('xls')), $dest)) {
		$data = new Spreadsheet_Excel_Reader($file->filepath, false, 'UTF-8');
		if($data->val(1, 1) == '教学班点名册') {
			$rowcount = $data->rowcount();
			$row = 5;
			$success = 0;
			$fail = 0;
			while($row <= $rowcount) {
				$student = array();
				$student['username'] = $data->val($row, 1);
				$student['fullname'] = $data->val($row, 3);
				$student['class'] = $data->val($row, 8);
				if(!empty($student['username'])) {
					$pass = $student['username'];
					$url = parse_url($GLOBALS['base_url']);
		      $mail = $student['username'] .'@'. $url['host'];
		      $user = user_load(array('name' => $student['username']));
					$account = user_save($user, array('name' => $student['username'], 'pass' => $pass, 'fullname' => $student['fullname'], 'class' => $student['class'], 'mail' => $mail, 'roles' => array('4' => '学生'), 'status' =>'1', 'access' => $now));
				}
				if($account) {
					$success += 1;
				}
				else {
					$fail += 1;
				}
				$row += 1;
			}
			drupal_set_message('成功导入'.$success.'条学生信息！');
			if($fail > 0) {
				drupal_set_message($fail.'条学生信息导入失败，请检查数据格式！', 'error');
			}
		} 
		else {
			drupal_set_message(t('导入失败，请检查文件格式'), 'error');
		}
	}
	else {
		drupal_set_message(t('导入失败，请检查文件格式'), 'error');
	}
	return;

}

function teacher_admin_import_cisco() {
	$form['#attributes'] = array('enctype' => "multipart/form-data");
	$form['upload'] = array(
		'#type' => 'file',
		'#title' => t('选择要导入的思科网院学生数据表格(XLS格式)'),
		'#description' => t('文件必须是XLS格式'),
		'#size' => 40,
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('导入'),
	);
	return $form;
}

function teacher_admin_import_cisco_submit($form, &$form_state) {
	require_once 'excel_reader2.php';
	$dest = file_directory_path();
	if($file = file_save_upload('upload', array('file_validate_extensions' => array('xls')), $dest)) {
		$data = new Spreadsheet_Excel_Reader($file->filepath, false, 'UTF-8');
		if($data->val(1, 1) == 'Academy Connection ID') {
			$rowcount = $data->rowcount();
			$row = 2;
			$success = 0;
			$fail = 0;
			while($row <= $rowcount) {
				$cisco = array();
				$cisco['acid'] = _teacher_admin_excel_filter($data->val($row, 1));
				$cisco['username'] = _teacher_admin_excel_filter($data->val($row, 5));
				$cisco['sid'] = _teacher_admin_excel_filter($data->val($row, 4));
				$cisco['fullname'] = _teacher_admin_excel_filter($data->val($row, 3)).' '._teacher_admin_excel_filter($data->val($row, 2));
				if(!empty($cisco['acid'])) {
					$result = db_query("INSERT INTO {cisco} (username, acid, fullname, sid) VALUES ('%s', '%s', '%s', '%s') ON DUPLICATE KEY UPDATE username = VALUES(username), fullname = VALUES(fullname), sid = VALUES(sid)", $cisco['username'], $cisco['acid'], $cisco['fullname'], $cisco['sid']);
				}
				if($result) {
					$success += 1;
				}
				else {
					$fail +=1;
				}
				$row += 1;
			}
			drupal_set_message('成功导入'.$success.'条学生信息！');
			if($fail > 0) {
				drupal_set_message($fail.'条学生信息导入失败，请检查数据格式！', 'error');
			}
		} 
		else {
			drupal_set_message(t('导入失败，请检查文件格式'), 'error');
		}
	}
	else {
		drupal_set_message(t('导入失败，请检查文件格式'), 'error');
	}
	return;
}

function teacher_students($callback_arg = '') {
	$op = isset($_POST['op']) ? $_POST['op'] : $callback_arg;
  switch ($op) {
    case 'add':
      $output = drupal_get_form('user_register');
      break;
    default:
      if (!empty($_POST['accounts']) && isset($_POST['operation']) && ($_POST['operation'] == 'delete')) {
        $output = drupal_get_form('teacher_students_multiple_delete_confirm');
      }
      else {
        $output = drupal_get_form('teacher_students_filter_form');
        $output .= drupal_get_form('teacher_students_account_list');
      }
  }
  return $output;
}

function teacher_students_filter_form() {
	$session = &$_SESSION['teacher_students_filter'];
  $session = is_array($session) ? $session : array();
  $filters = teacher_students_filters();

  $i = 0;
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Show only users where'),
    '#theme' => 'teacher_students_filter',
  );
  
	foreach ($session as $filter) {
    list($type, $value) = $filter;
    // Merge an array of arrays into one if necessary.
    $options = $type == 'permission' ? call_user_func_array('array_merge', $filters[$type]['options']) : $filters[$type]['options'];
    $params = array('%property' => $filters[$type]['title'] , '%value' => $options[$value]);
		$form['filters']['current'][] = array('#value' => t('<strong>%property</strong> is <strong>%value</strong>', $params));
  }
  
  foreach ($filters as $key => $filter) {
    $names[$key] = $filter['title'];
    $form['filters']['status'][$key] = array(
      '#type' => 'select',
      '#options' => $filter['options'],
    );
  }

  $form['filters']['filter'] = array(
    '#type' => 'radios',
    '#options' => $names,
  	'#default_value' => "class",
  );
  
  $form['filters']['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Show'),
  );

  drupal_add_js('misc/form.js', 'core');

  return $form;
}

function theme_teacher_students_filter($form) {
  $output = '<ul class="clear-block">';
  if (!empty($form['current'])) {
    foreach (element_children($form['current']) as $key) {
      $output .= '<li>'. drupal_render($form['current'][$key]) .'</li>';
    }
  }

  $output .= '<li><dl class="multiselect">'. (!empty($form['current']) ? '<dt>'. t('where') .'</dt>' : '') .'<dd class="a">';
  foreach (element_children($form['filter']) as $key) {
    $output .= drupal_render($form['filter'][$key]);
  }
  $output .= '</dd>';

  $output .= '<dt>'. t('is') .'</dt><dd class="b">';

  foreach (element_children($form['status']) as $key) {
    $output .= drupal_render($form['status'][$key]);
  }
  $output .= '</dd>';

  $output .= '</dl>';
  $output .= '<div class="container-inline" id="user-admin-buttons">'. drupal_render($form['buttons']) .'</div>';
  $output .= '</li></ul>';

  return $output;
}

function teacher_students_filter_form_submit($form, &$form_state) {
  $filters = teacher_students_filters();
  if (isset($form_state['values']['filter'])) {
     $filter = $form_state['values']['filter'];
     // Merge an array of arrays into one if necessary.
     $options = $filters[$filter]['options'];
     if (isset($options[$form_state['values'][$filter]])) {
       $_SESSION['teacher_students_filter'][0] = array($filter, $form_state['values'][$filter]);
     }
  } 
  return;
}


/**
 * Return class list 
 */
function teacher_students_classes() {
	$classes = array();
	$result = db_query('SELECT DISTINCT class FROM {users}');
	while ($class = db_fetch_object($result)) {
		$classes[$class->class] = $class->class;
	}
	return array_filter($classes);
}

function teacher_students_filters() {
  // Regular filters
  $filters = array();
  $classes = teacher_students_classes();
  $filters['class'] = array(
    'title' => t('Class'),
    'where' => "u.class = '%s'",
    'join' => '',
    'options' => $classes,
  );
  return $filters;
}

function teacher_students_build_filter_query() {
  $filters = teacher_students_filters();

  // Build query
  $where = $args = $join = array();
  if(isset($_SESSION['teacher_students_filter'])) {
    foreach ($_SESSION['teacher_students_filter'] as $filter) {
	    list($key, $value) = $filter;
	    if ($key == 'permission') {
	      $account = new stdClass();
	      $account->uid = 'user_filter';
	      $account->roles = array(DRUPAL_AUTHENTICATED_RID => 1);
	      if (user_access($value, $account)) {
	        continue;
	      }
	    }
	    $where[] = $filters[$key]['where'];
	    $args[] = $value;
	    $join[] = $filters[$key]['join'];
  	}
  }
  $where = !empty($where) ? 'WHERE '. implode(' AND ', $where) : '';
  $join = !empty($join) ? ' '. implode(' ', array_unique($join)) : '';

  return array('where' => $where,
           'join' => $join,
           'args' => $args,
         );
}

function teacher_students_account_list() {
	$filter = teacher_students_build_filter_query();
	$header = array(
    array(),
    array('data' => t('Username'), 'field' => 'u.name', 'sort' => 'asc'),
    array('data' => t('Fullname'), 'field' => 'u.fullname'),
    array('data' => t('Class'), 'field' => 'u.class'),
    array('data' => t('思科网院ID'), 'field' => 'c.acid'),
    array('data' => t('思科网院用户名'), 'field' => 'c.username'),
    array('data' => t('Status'), 'field' => 'u.status'),
    t('Operations')
  );
  
  $sql = 'SELECT u.uid, u.name, u.fullname, u.class, c.acid, c.username, u.status FROM {users} u LEFT JOIN {cisco} c ON u.cisco_id = c.acid '.$filter['where'];
  $query_count = 'SELECT COUNT(u.uid) FROM {users} u LEFT JOIN {cisco} c ON u.cisco_id = c.acid '.$filter['where'];
  
  $sql .= tablesort_sql($header);

  $result = pager_query($sql, 50, 0, $query_count, $filter['args']);

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $options = array();
  foreach (module_invoke_all('user_operations') as $operation => $array) {
    $options[$operation] = $array['label'];
  }
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => 'unblock',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  $destination = drupal_get_destination();

  $status = array(t('blocked'), t('active'));
  $roles = user_roles(TRUE);
  $accounts = array();
  while ($account = db_fetch_object($result)) {
    $accounts[$account->uid] = '';
    $form['name'][$account->uid] = array('#value' => $account->name);
    $form['fullname'][$account->uid] = array('#value' => $account->fullname);
    $form['class'][$account->uid] = array('#value' => $account->class);
    $form['acid'][$account->uid] = array('#value' => $account->acid);
    $form['cisco_username'][$account->uid] = array('#value' => $account->username);
    $form['status'][$account->uid] =  array('#value' => $status[$account->status]);
    //$form['last_access'][$account->uid] =  array('#value' => $account->access ? t('@time ago', array('@time' => format_interval(time() - $account->access))) : t('never'));
    $form['operations'][$account->uid] = array('#value' => l(t('edit'), "user/$account->uid/edit", array('query' => $destination)));
  }
  $form['accounts'] = array(
    '#type' => 'checkboxes',
    '#options' => $accounts
  );
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  return $form;
}

function teacher_students_account_list_submit($form, &$form_state) {
  $operations = module_invoke_all('user_operations', $form_state);
  $operation = $operations[$form_state['values']['operation']];
  // Filter out unchecked accounts.
  $accounts = array_filter($form_state['values']['accounts']);
  if ($function = $operation['callback']) {
    // Add in callback arguments if present.
    if (isset($operation['callback arguments'])) {
      $args = array_merge(array($accounts), $operation['callback arguments']);
    }
    else {
      $args = array($accounts);
    }
    call_user_func_array($function, $args);

    drupal_set_message(t('The update has been performed.'));
  }
}

function theme_teacher_students_account_list($form) {
	// Overview table:
	$header = array(
    array(),
    array('data' => t('Username'), 'field' => 'u.name', 'sort' => 'asc'),
    array('data' => t('Fullname'), 'field' => 'u.fullname'),
    array('data' => t('Class'), 'field' => 'u.class'),
    array('data' => t('思科网院ID'), 'field' => 'c.acid'),
    array('data' => t('思科网院用户名'), 'field' => 'c.username'),
    array('data' => t('Status'), 'field' => 'u.status'),
    t('Operations')
  );

  $output = drupal_render($form['options']);
  if (isset($form['name']) && is_array($form['name'])) {
    foreach (element_children($form['name']) as $key) {
      $rows[] = array(
        drupal_render($form['accounts'][$key]),
        drupal_render($form['name'][$key]),
        drupal_render($form['fullname'][$key]),
        drupal_render($form['class'][$key]),
        drupal_render($form['acid'][$key]),
        drupal_render($form['cisco_username'][$key]),
        drupal_render($form['status'][$key]),
        drupal_render($form['operations'][$key]),
      );
    }
  }
  else {
    $rows[] = array(array('data' => t('No users available.'), 'colspan' => '7'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}

function teacher_admin_notices() {
	global $user;
	$result = pager_query(db_rewrite_sql('SELECT n.*, u.name FROM {node} n '.' INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = "notice" AND n.uid = '.$user->uid.' ORDER BY n.changed DESC'), 50, 0, NULL);

  // Enable language column if locale is enabled or if we have any node with language
  $count = db_result(db_query("SELECT COUNT(*) FROM {node} n WHERE language != ''"));
  $multilanguage = (module_exists('locale') || $count);
  $languages = language_list();
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = empty($node->language) ? array() : array('language' => $languages[$node->language]);
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => $node->name);
    $form['status'][$node->nid] =  array('#value' => ($node->status ? t('published') : t('not published')));
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
    $form['operations'][$node->nid] = array('#value' => l(t('edit'), 'node/'. $node->nid .'/edit', array('query' => $destination)));
  }
  $form['nodes'] = array('#type' => 'checkboxes', '#options' => $nodes);
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'teacher_admin_nodes';
  return $form;
}

function teacher_admin_courses() {
	$result = db_query('SELECT * FROM {term_data} WHERE vid = 1 ORDER BY weight ASC');
	$menu_items = array();
	$menu_items['添加课程分类'] = array(
		'添加课程分类',
		array(
  	l('添加课程分类', 'teacher/courses/add'), 
  	),
	);
	while ($course = db_fetch_object($result)) {
		$menu_items[$course->name] = array(
			$course->description,
			array(
  		l('管理课程', 'teacher/lessons/'.$course->tid), 
  		l('修改课程描述', 'teacher/courses/edit/'.$course->tid), 
  		),
		);
	}
  return theme('teacher_task_list', $menu_items);
}

function teacher_admin_courses_add() {
	$vocabulary = taxonomy_vocabulary_load(1);
  return drupal_get_form('teacher_admin_courses_form' , $vocabulary);
}

function teacher_admin_courses_edit($tid) {
	if ($term = (array)taxonomy_get_term($tid)) {
    return drupal_get_form('teacher_admin_courses_form', taxonomy_vocabulary_load($term['vid']), $term);
  }
  return drupal_not_found();
}

function teacher_admin_courses_form(&$form_state, $vocabulary, $edit = array()) {
  $edit += array(
    'name' => '',
    'description' => '',
    'tid' => NULL,
    'weight' => 0,
  );

  $parent = array_keys(taxonomy_get_parents($edit['tid']));
  $form['#term'] = $edit;
  $form['#term']['parent'] = $parent;
  $form['#vocabulary'] = (array)$vocabulary;
  $form['#vocabulary']['nodes'] = drupal_map_assoc($vocabulary->nodes);;

  // Check for confirmation forms.
  if (isset($form_state['confirm_delete'])) {
    return array_merge($form, taxonomy_term_confirm_delete($form_state, $edit['tid']));
  }
  elseif (isset($form_state['confirm_parents'])) {
    return array_merge($form, taxonomy_term_confirm_parents($form_state, $vocabulary));
  }

  $form['identification'] = array(
    '#type' => 'fieldset',
    '#title' => t('Identification'),
    '#collapsible' => TRUE,
  );
  $form['identification']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Term name'),
    '#default_value' => $edit['name'],
    '#maxlength' => 255,
    '#description' => t('The name of this term.'),
    '#required' => TRUE);
  $form['identification']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $edit['description'],
    '#description' => t('A description of the term. To be displayed on taxonomy/term pages and RSS feeds.'));
	$form['advanced']['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#size' => 6,
    '#default_value' => $edit['weight'],
    '#description' => t('Terms are displayed in ascending order by weight.'),
    '#required' => TRUE);
  $form['vid'] = array(
    '#type' => 'value',
    '#value' => $vocabulary->vid);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'));

  if ($edit['tid']) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'));
    $form['tid'] = array(
      '#type' => 'value',
      '#value' => $edit['tid']);
  }
  else {
    $form['destination'] = array('#type' => 'hidden', '#value' => $_GET['q']);
  }

  return $form;
}

/**
 * Validation handler for the term edit form. Ensure numeric weight values.
 *
 * @see taxonomy_form_term()
 */
function teacher_admin_courses_form_validate($form, &$form_state) {
  if (isset($form_state['values']['weight']) && !is_numeric($form_state['values']['weight'])) {
    form_set_error('weight', t('Weight value must be numeric.'));
  }
}

/**
 * Submit handler to insert or update a term.
 *
 * @see taxonomy_form_term()
 */
function teacher_admin_courses_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Delete')) {
    // Execute the term deletion.
    if ($form_state['values']['delete'] === TRUE) {
      return taxonomy_term_confirm_delete_submit($form, $form_state);
    }
    // Rebuild the form to confirm term deletion.
    $form_state['rebuild'] = TRUE;
    $form_state['confirm_delete'] = TRUE;
    return;
  }
  // Rebuild the form to confirm enabling multiple parents.
  elseif ($form_state['clicked_button']['#value'] == t('Save') && !$form['#vocabulary']['tags'] && count($form_state['values']['parent']) > 1 && $form['#vocabulary']['hierarchy'] < 2) {
    $form_state['rebuild'] = TRUE;
    $form_state['confirm_parents'] = TRUE;
    return;
  }

  switch (taxonomy_save_term($form_state['values'])) {
    case SAVED_NEW:
      drupal_set_message(t('Created new term %term.', array('%term' => $form_state['values']['name'])));
      watchdog('taxonomy', 'Created new term %term.', array('%term' => $form_state['values']['name']), WATCHDOG_NOTICE, l(t('edit'), 'admin/content/taxonomy/edit/term/'. $form_state['values']['tid']));
      break;
    case SAVED_UPDATED:
      drupal_set_message(t('Updated term %term.', array('%term' => $form_state['values']['name'])));
      watchdog('taxonomy', 'Updated term %term.', array('%term' => $form_state['values']['name']), WATCHDOG_NOTICE, l(t('edit'), 'admin/content/taxonomy/edit/term/'. $form_state['values']['tid']));
      break;
  }

  if (!$form['#vocabulary']['tags']) {
    $current_parent_count = count($form_state['values']['parent']);
    $previous_parent_count = count($form['#term']['parent']);
    // Root doesn't count if it's the only parent.
    if ($current_parent_count == 1 && isset($form_state['values']['parent'][''])) {
      $current_parent_count = 0;
      $form_state['values']['parent'] = array();
    }

    // If the number of parents has been reduced to one or none, do a check on the
    // parents of every term in the vocabulary value.
    if ($current_parent_count < $previous_parent_count && $current_parent_count < 2) {
      taxonomy_check_vocabulary_hierarchy($form['#vocabulary'], $form_state['values']);
    }
    // If we've increased the number of parents and this is a single or flat
    // hierarchy, update the vocabulary immediately.
    elseif ($current_parent_count > $previous_parent_count && $form['#vocabulary']['hierarchy'] < 2) {
      $form['#vocabulary']['hierarchy'] = $current_parent_count == 1 ? 1 : 2;
      taxonomy_save_vocabulary($form['#vocabulary']);
    }
  }

  $form_state['tid'] = $form_state['values']['tid'];
  $form_state['redirect'] = 'teacher/courses';
  return;
}

function taxonomy_term_confirm_delete(&$form_state, $tid) {
  $term = taxonomy_get_term($tid);

  $form['type'] = array('#type' => 'value', '#value' => 'term');
  $form['name'] = array('#type' => 'value', '#value' => $term->name);
  $form['tid'] = array('#type' => 'value', '#value' => $tid);
  $form['delete'] = array('#type' => 'value', '#value' => TRUE);
  return confirm_form($form,
                  t('Are you sure you want to delete the term %title?',
                  array('%title' => $term->name)),
                  'admin/content/taxonomy',
                  t('Deleting a term will delete all its children if there are any. This action cannot be undone.'),
                  t('Delete'),
                  t('Cancel'));
}

/**
 * Submit handler to delete a term after confirmation.
 *
 * @see taxonomy_term_confirm_delete()
 */
function taxonomy_term_confirm_delete_submit($form, &$form_state) {
  taxonomy_del_term($form_state['values']['tid']);
  taxonomy_check_vocabulary_hierarchy($form['#vocabulary'], $form_state['values']);
  drupal_set_message(t('Deleted term %name.', array('%name' => $form_state['values']['name'])));
  watchdog('taxonomy', 'Deleted term %name.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE);
  $form_state['redirect'] = 'teacher/courses';
  return;
}

function teacher_admin_lessons(&$form_state, $course) {
	$result = pager_query(db_rewrite_sql('SELECT n.*, u.name FROM {node} n '.' INNER JOIN {term_node} t ON n.nid = t.nid INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = "lesson" AND t.tid = '.$course.' ORDER BY n.changed DESC'), 50, 0, NULL);

  $languages = language_list();
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = empty($node->language) ? array() : array('language' => $languages[$node->language]);
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => $node->name);
    $form['status'][$node->nid] =  array('#value' => ($node->status ? t('published') : t('not published')));
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
    $form['operations'][$node->nid] = array('#value' => l(t('edit'), 'node/'. $node->nid .'/edit', array('query' => $destination)));
  }
  $form['nodes'] = array('#type' => 'checkboxes', '#options' => $nodes);
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'teacher_admin_nodes';
  return $form;
}

function teacher_admin_tests(&$form_state) {
	global $user;
	$result = pager_query(db_rewrite_sql('SELECT n.*, u.name FROM {node} n '.' INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = "test" AND n.uid = '.$user->uid.' ORDER BY n.changed DESC'), 50, 0, NULL);
	
  // Enable language column if locale is enabled or if we have any node with language
  $count = db_result(db_query("SELECT COUNT(*) FROM {node} n WHERE language != ''"));
  $multilanguage = (module_exists('locale') || $count);
//	$form['options'] = array(
//    '#type' => 'fieldset',
//    '#title' => t('Update options'),
//    '#prefix' => '<div class="container-inline">',
//    '#suffix' => '</div>',
//  );
//  $options = array();
//  
//  foreach (module_invoke_all('node_operations') as $operation => $array) {
//    $options[$operation] = $array['label'];
//  }
//  $form['options']['operation'] = array(
//    '#type' => 'select',
//    '#options' => $options,
//    '#default_value' => 'approve',
//  );
//  $form['options']['submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Update'),
//    '#submit' => array('node_admin_nodes_submit'),
//  );

  $languages = language_list();
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = empty($node->language) ? array() : array('language' => $languages[$node->language]);
    $form['title'][$node->nid] = array('#value' => l($node->title, 'teacher/test/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => $node->name);
    $form['status'][$node->nid] =  array('#value' => ($node->status ? t('published') : t('not published')));
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
    $form['operations'][$node->nid] = array('#value' => l(t('edit'), 'node/'. $node->nid .'/edit', array('query' => $destination)));
  }
  $form['nodes'] = array('#type' => 'checkboxes', '#options' => $nodes);
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'teacher_admin_nodes';
  return $form;
}

function teacher_admin_test_list_access($test_id) {
	global $user;
	if(user_access('access teacher pages', $user)) {
		$result = db_result(db_query('SELECT uid FROM {node} WHERE nid = %d AND type = "test"',$test_id));
		if($user->uid == $result) {
			return TRUE;
		}
	}
	else {
		return FALSE;
	}
}

function teacher_admin_test_list($test_id) {	
	$rows = array();
  $header = array(
  	array('data' => t('姓名'), 'field' => 'u.fullname'),
    array('data' => t('学号'), 'field' => 'u.name'),
    array('data' => t('日期'), 'field' => 'n.created'),
    array('data' => t('已批改')),
    array('data' => t('操作')),
  );
  $sql = "SELECT t.*, n.*, u.* FROM {tests} t INNER JOIN {node} n ON t.nid = n.nid INNER JOIN {users} u ON u.uid = n.uid WHERE t.tid = %d";
  $tablesort = tablesort_sql($header);
  $result = pager_query($sql . $tablesort, 50, NULL, NULL, $test_id);
  $destination = drupal_get_destination();
  while ($test = db_fetch_object($result)) {
    $test_icon = null;
  	if ($test->correct == 1) {
  		$test_icon = theme('image', 'misc/message-16-ok.png', t('已批改'), t('已批改'), array('class' => 'table-icon'));
  	}
  	else {
  		$test_icon = theme('image', 'misc/message-16-wait.png', t('未批改'), t('未批改'), array('class' => 'table-icon'));
  	}
    $rows[] = array('data' =>
      array(
      	$test->fullname,
      	$test->name,
      	format_date($test->created),
      	$test_icon,
      	l('批改', 'teacher/test/correct/'.$test->nid, array('query' => $destination)),
      )
    );
  }
  if (!$rows) {
    $rows[] = array(array('data' => t('无已提交作业.'), 'colspan' => 6));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);

  return $output;
}

function teacher_test_correct_access() {
	global $user;
	$result = db_query('SELECT tid FROM {tests} WHERE nid = %d', arg(3));
	$question = node_load(db_result($result));
	if ($question && user_access('access teacher pages', $user)) {
		return TRUE;
	}
	else {
		return FALSE;
	}
}

function teacher_admin_news() {
	$result = pager_query(db_rewrite_sql('SELECT n.*, u.name FROM {node} n '.' INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = "news" '.' ORDER BY n.changed DESC'), 50, 0, NULL);

  // Enable language column if locale is enabled or if we have any node with language
  $count = db_result(db_query("SELECT COUNT(*) FROM {node} n WHERE language != ''"));
  $multilanguage = (module_exists('locale') || $count);
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $languages = language_list();
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = empty($node->language) ? array() : array('language' => $languages[$node->language]);
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options));
    $form['username'][$node->nid] = array('#value' => $node->name);
    $form['status'][$node->nid] =  array('#value' => ($node->status ? t('published') : t('not published')));
    $form['date'][$node->nid] = array('#value' => format_date($node->changed));
    $form['operations'][$node->nid] = array('#value' => l(t('edit'), 'node/'. $node->nid .'/edit', array('query' => $destination)));
  }
  $form['nodes'] = array('#type' => 'checkboxes', '#options' => $nodes);
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'teacher_admin_nodes';
  return $form;
}

function theme_teacher_admin_nodes($form) {
  // If there are rows in this form, then $form['title'] contains a list of
  // the title form elements.
  $has_posts = isset($form['title']) && is_array($form['title']);
  $select_header = $has_posts ? theme('table_select_header_cell') : '';
  $header = array($select_header, t('Title'), t('Author'), t('Status'), t('Date'));
  $header[] = t('Operations');
  $output = '';

  //$output .= drupal_render($form['options']);
  if ($has_posts) {
    foreach (element_children($form['title']) as $key) {
      $row = array();
      $row[] = drupal_render($form['nodes'][$key]);
      $row[] = drupal_render($form['title'][$key]);
      $row[] = drupal_render($form['username'][$key]);
      $row[] = drupal_render($form['status'][$key]);
			$row[] = drupal_render($form['date'][$key]);
      $row[] = drupal_render($form['operations'][$key]);
      $rows[] = $row;
    }

  }
  else {
    $rows[] = array(array('data' => t('无内容'), 'colspan' => '6'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}

function teacher_block($op = 'list', $delta = '', $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['home-course-list'] = array(
        'info'       => t('Course List'),
      );
      return $blocks;
    case 'view':
      switch ($delta) {
        case 'home-course-list':
          $block['content'] = get_course_list();
          break;
      }
      return $block;
  }
}

function get_course_list() {
	$type = 'ul';
	$attributes = array('class' => 'course_list');
	$items = array();
	$result = db_query('SELECT tid, name, description FROM {term_data} ORDER BY weight');
	while ($term = db_fetch_object($result)) {

		$item_ul['name'] = array(
    	'data' => $term->name,
			'class' => 'course_term',
		);
		$item_ul['description'] = array(
			'data' => $term->description,
			'class' => 'course_description',
		);
		$node_items = array();
		$node_result = db_query('SELECT n.nid, n.title FROM {node} n INNER JOIN {term_node} t ON n.nid = t.nid WHERE t.tid = %d AND n.status = 1', $term->tid);
		while ($node = db_fetch_object($node_result)) {
			$node_items[] = array(
				'data' => l($node->title, 'node/'.$node->nid),
				'class' => 'course_node',
			);
		}
		$item_ul['list'] = array(
			'data' => theme_item_list($node_items, NULL, 'ul',NULL),
			'class' => 'course_node_list',
		);
		$items[] = array(
			'data' => theme_item_list($item_ul, NULL, 'ul',NULL),
			'class' => 'course_list_item',
		);
		
	}
	return theme_item_list($items, NULL, $type, $attributes);
}