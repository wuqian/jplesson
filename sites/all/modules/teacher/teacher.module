<?php
// $Id$

/**
 * @file
 * Teacher Module
 */

/**
 * Implementation of hook_menu().
 */
function teacher_menu() {
  $items['teacher'] = array(
    'title' => '教师平台',
  	'description' => '发布通知、管理课程、管理作业、管理学生信息',
    'page callback' => 'teacher_task_list',
		'access arguments' => array('access content'), 
    'type' => MENU_NORMAL_ITEM,
  );
  $items['teacher/notices'] = array(
    'title' => '通知管理',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teacher_admin_notices'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/lessons'] = array(
    'title' => '课程管理',
    'page callback' => 'teacher_task_list',
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/tests'] = array(
    'title' => '作业管理',
    'page callback' => 'teacher_task_list',
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/students'] = array(
    'title' => '学生管理',
    'page callback' => 'teacher_students',
  	'page arguments' => array('list'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  $items['teacher/students/add'] = array(
    'title' => '添加学生用户',
    'page arguments' => array('add'),
  	'access arguments' => array('access teacher pages'), 
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function teacher_perm() {
	return array('access teacher pages');
}

function teacher_theme() {
	return array_merge(drupal_common_theme(), array(
    'teacher_task_list' => array(
      'arguments' => array('menu_items' => NULL),
    ),
    'teacher_students_account_list' => array(
      'arguments' => array('form' => NULL),
    ),
    'teacher_students_filter' => array(
      'arguments' => array('form' => NULL),
    ),
  ));
}


function teacher_task_list() {
	$menu_items = array();
  $menu_items['通知管理'] = array(
  	'通知发布与管理', 
  	array(
  		l('发布新通知', 'teacher/notices/new'), 
  		l('通知管理', 'teacher/notices/'), 
  	),
  );
  $menu_items['课程管理'] = array(
    '添加、删除、修改课程，管理课程可见性', 
  	array(
  		l('发布新课程', 'teacher/lessons/new'), 
  		l('课程管理', 'teacher/lessons'), 
  	),
  );
  $menu_items['作业管理'] = array(
    '作业发布与管理、查看作业提交状态', 
  	array(
  		l('发布新作业', 'teacher/tests/new'), 
  		l('作业管理', 'teacher/tests'), 
  	),
  );
  $menu_items['学生管理'] = array(
  	'学生基本信息查看与管理', 
  	array(
  		l('添加学生用户', 'teacher/students/add'), 
  		l('学生管理', 'teacher/students'), 
  	),
  );
  return theme('teacher_task_list', $menu_items);
}

function teacher_help($path, $arg) {
  global $base_url;
  switch ($path) {
    case 'teacher':
    	$output = '<p>'.'发布通知、管理课程、管理作业、管理学生信息'.'<p>';
    	return $output;
  }
}

function theme_teacher_task_list($menu_items) {
  $stripe = 0;
  $output = '';
  $container = array('left' => '', 'right' => '');
  $flip = array('left' => 'right', 'right' => 'left');
  $position = 'left';

  // Iterate over all modules
  foreach ($menu_items as $module => $block) {
    list($description, $items) = $block;

    // Output links
    if (count($items)) {
      $block = array();
      $block['title'] = $module;
      $block['content'] = theme('item_list', $items);
      $block['description'] = t($description);

      if ($block_output = theme('admin_block', $block)) {
        if (!isset($block['position'])) {
          // Perform automatic striping.
          $block['position'] = $position;
          $position = $flip[$position];
        }
        $container[$block['position']] .= $block_output;
      }
    }
  }

  $output = '<div class="admin clear-block">';
  foreach ($container as $id => $data) {
    $output .= '<div class="'. $id .' clear-block">';
    $output .= $data;
    $output .= '</div>';
  }
  $output .= '</div>';

  return $output;
}


function teacher_students($callback_arg = '') {
	$op = isset($_POST['op']) ? $_POST['op'] : $callback_arg;
  switch ($op) {
    case 'add':
      $output = drupal_get_form('user_register');
      break;
    default:
      if (!empty($_POST['accounts']) && isset($_POST['operation']) && ($_POST['operation'] == 'delete')) {
        $output = drupal_get_form('teacher_students_multiple_delete_confirm');
      }
      else {
        $output = drupal_get_form('teacher_students_filter_form');
        $output .= drupal_get_form('teacher_students_account_list');
      }
  }
  return $output;
}

function teacher_students_filter_form() {
	$session = &$_SESSION['teacher_students_filter'];
  $session = is_array($session) ? $session : array();
  $filters = teacher_students_filters();

  $i = 0;
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Show only users where'),
    '#theme' => 'teacher_students_filter',
  );
  
	foreach ($session as $filter) {
    list($type, $value) = $filter;
    // Merge an array of arrays into one if necessary.
    $options = $type == 'permission' ? call_user_func_array('array_merge', $filters[$type]['options']) : $filters[$type]['options'];
    $params = array('%property' => $filters[$type]['title'] , '%value' => $options[$value]);
		$form['filters']['current'][] = array('#value' => t('<strong>%property</strong> is <strong>%value</strong>', $params));
  }
  
  foreach ($filters as $key => $filter) {
    $names[$key] = $filter['title'];
    $form['filters']['status'][$key] = array(
      '#type' => 'select',
      '#options' => $filter['options'],
    );
  }

  $form['filters']['filter'] = array(
    '#type' => 'radios',
    '#options' => $names,
  	'#default_value' => "class",
  );
  
  $form['filters']['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Show'),
  );

  drupal_add_js('misc/form.js', 'core');

  return $form;
}

function theme_teacher_students_filter($form) {
  $output = '<ul class="clear-block">';
  if (!empty($form['current'])) {
    foreach (element_children($form['current']) as $key) {
      $output .= '<li>'. drupal_render($form['current'][$key]) .'</li>';
    }
  }

  $output .= '<li><dl class="multiselect">'. (!empty($form['current']) ? '<dt>'. t('where') .'</dt>' : '') .'<dd class="a">';
  foreach (element_children($form['filter']) as $key) {
    $output .= drupal_render($form['filter'][$key]);
  }
  $output .= '</dd>';

  $output .= '<dt>'. t('is') .'</dt><dd class="b">';

  foreach (element_children($form['status']) as $key) {
    $output .= drupal_render($form['status'][$key]);
  }
  $output .= '</dd>';

  $output .= '</dl>';
  $output .= '<div class="container-inline" id="user-admin-buttons">'. drupal_render($form['buttons']) .'</div>';
  $output .= '</li></ul>';

  return $output;
}

function teacher_students_filter_form_submit($form, &$form_state) {
  $filters = teacher_students_filters();
  if (isset($form_state['values']['filter'])) {
     $filter = $form_state['values']['filter'];
     // Merge an array of arrays into one if necessary.
     $options = $filters[$filter]['options'];
     if (isset($options[$form_state['values'][$filter]])) {
       $_SESSION['teacher_students_filter'][0] = array($filter, $form_state['values'][$filter]);
     }
  } 
  return;
}


/**
 * Return class list 
 */
function teacher_students_classes() {
	$classes = array();
	$result = db_query('SELECT DISTINCT class FROM {users} WHERE class != 0');
	while ($class = db_fetch_object($result)) {
		$classes[$class->class] = $class->class;
	}
	return array_filter($classes);
}

function teacher_students_filters() {
  // Regular filters
  $filters = array();
  $classes = teacher_students_classes();
  $filters['class'] = array(
    'title' => t('Class'),
    'where' => "u.class = %s",
    'join' => '',
    'options' => $classes,
  );
  return $filters;
}

function teacher_students_build_filter_query() {
  $filters = teacher_students_filters();

  // Build query
  $where = $args = $join = array();
  if(isset($_SESSION['teacher_students_filter'])) {
    foreach ($_SESSION['teacher_students_filter'] as $filter) {
    list($key, $value) = $filter;
    // This checks to see if this permission filter is an enabled permission for
    // the authenticated role. If so, then all users would be listed, and we can
    // skip adding it to the filter query.
    if ($key == 'permission') {
      $account = new stdClass();
      $account->uid = 'user_filter';
      $account->roles = array(DRUPAL_AUTHENTICATED_RID => 1);
      if (user_access($value, $account)) {
        continue;
      }
    }
    $where[] = $filters[$key]['where'];
    $args[] = $value;
    $join[] = $filters[$key]['join'];
  }
  }

  $where = !empty($where) ? 'AND '. implode(' AND ', $where) : '';
  $join = !empty($join) ? ' '. implode(' ', array_unique($join)) : '';

  return array('where' => $where,
           'join' => $join,
           'args' => $args,
         );
}

function teacher_students_account_list() {
	$filter = teacher_students_build_filter_query();
	$header = array(
    array(),
    array('data' => t('Username'), 'field' => 'u.name', 'sort' => 'asc'),
    array('data' => t('Fullname'), 'field' => 'u.fullname'),
    array('data' => t('Status'), 'field' => 'u.status'),
    array('data' => t('Class'), 'field' => 'u.class'),
    array('data' => t('Last access'), 'field' => 'u.access'),
    t('Operations')
  );
  
  $sql = 'SELECT u.uid, u.name, u.fullname, u.status, u.class, u.access FROM {users} u WHERE u.class != 0 '. $filter['where'];
  $query_count = 'SELECT COUNT(u.uid) FROM {users} u WHERE u.class != 0 '. $filter['where'];
  
  $sql .= tablesort_sql($header);

  $result = pager_query($sql, 50, 0, $query_count, $filter['args']);

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $options = array();
  foreach (module_invoke_all('user_operations') as $operation => $array) {
    $options[$operation] = $array['label'];
  }
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => 'unblock',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  $destination = drupal_get_destination();

  $status = array(t('blocked'), t('active'));
  $roles = user_roles(TRUE);
  $accounts = array();
  while ($account = db_fetch_object($result)) {
    $accounts[$account->uid] = '';
    $form['name'][$account->uid] = array('#value' => theme('username', $account));
    $form['fullname'][$account->uid] = array('#value' => $account->fullname);
    $form['status'][$account->uid] =  array('#value' => $status[$account->status]);
    $form['class'][$account->uid] = array('#value' => $account->class);
    $form['last_access'][$account->uid] =  array('#value' => $account->access ? t('@time ago', array('@time' => format_interval(time() - $account->access))) : t('never'));
    $form['operations'][$account->uid] = array('#value' => l(t('edit'), "user/$account->uid/edit", array('query' => $destination)));
  }
  $form['accounts'] = array(
    '#type' => 'checkboxes',
    '#options' => $accounts
  );
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  return $form;
}

function teacher_students_account_list_submit($form, &$form_state) {
  $operations = module_invoke_all('user_operations', $form_state);
  $operation = $operations[$form_state['values']['operation']];
  // Filter out unchecked accounts.
  $accounts = array_filter($form_state['values']['accounts']);
  if ($function = $operation['callback']) {
    // Add in callback arguments if present.
    if (isset($operation['callback arguments'])) {
      $args = array_merge(array($accounts), $operation['callback arguments']);
    }
    else {
      $args = array($accounts);
    }
    call_user_func_array($function, $args);

    drupal_set_message(t('The update has been performed.'));
  }
}

function teacher_students_multiple_delete_confirm() {
	
}

function theme_teacher_students_account_list($form) {
	// Overview table:
  $header = array(
    theme('table_select_header_cell'),
    array('data' => t('Username'), 'field' => 'u.name'),
    array('data' => t('Fullname'), 'field' => 'u.fullname'),
    array('data' => t('Status'), 'field' => 'u.status'),
    array('data' => t('Class'), 'field' => 'u.class'),
    array('data' => t('Last access'), 'field' => 'u.access'),
    t('Operations')
  );

  $output = drupal_render($form['options']);
  if (isset($form['name']) && is_array($form['name'])) {
    foreach (element_children($form['name']) as $key) {
      $rows[] = array(
        drupal_render($form['accounts'][$key]),
        drupal_render($form['name'][$key]),
        drupal_render($form['fullname'][$key]),
        drupal_render($form['status'][$key]),
        drupal_render($form['class'][$key]),
        drupal_render($form['last_access'][$key]),
        drupal_render($form['operations'][$key]),
      );
    }
  }
  else {
    $rows[] = array(array('data' => t('No users available.'), 'colspan' => '7'));
  }

  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }

  $output .= drupal_render($form);

  return $output;
}

function teacher_admin_notices() {
	$result = pager_query(db_rewrite_sql('SELECT n.*, u.name FROM {node} n '.' INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = "notice" '.' ORDER BY n.changed DESC'), 50, 0, NULL);

  // Enable language column if locale is enabled or if we have any node with language
  $count = db_result(db_query("SELECT COUNT(*) FROM {node} n WHERE language != ''"));
  $multilanguage = (module_exists('locale') || $count);

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $options = array();
  foreach (module_invoke_all('node_operations') as $operation => $array) {
    $options[$operation] = $array['label'];
  }
  $aaa = function_exists('node_node_operations');
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => 'approve',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#submit' => array('node_admin_nodes_submit'),
  );

  $languages = language_list();
  $destination = drupal_get_destination();
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[$node->nid] = '';
    $options = empty($node->language) ? array() : array('language' => $languages[$node->language]);
    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options) .' '. theme('mark', node_mark($node->nid, $node->changed)));
    $form['name'][$node->nid] =  array('#value' => check_plain(node_get_types('name', $node)));
    $form['username'][$node->nid] = array('#value' => theme('username', $node));
    $form['status'][$node->nid] =  array('#value' => ($node->status ? t('published') : t('not published')));
    if ($multilanguage) {
      $form['language'][$node->nid] = array('#value' => empty($node->language) ? t('Language neutral') : t($languages[$node->language]->name));
    }
    $form['operations'][$node->nid] = array('#value' => l(t('edit'), 'node/'. $node->nid .'/edit', array('query' => $destination)));
  }
  $form['nodes'] = array('#type' => 'checkboxes', '#options' => $nodes);
  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));
  $form['#theme'] = 'node_admin_nodes';
  return $form;
}